postVisitorsWeb = broadNet$postVisitorsWeb
hours = broadNet$hours
weekdays = broadNet$weekdays
grossRating = broadNet$gross_rating_point
broadDumm = cbind(postVisitorsWeb, preVisitorsWeb, hours, weekdays, grossRating, dummiesDirectModel)
#Calculate Mean Squared Prediction Error
preVisitorsWeb = broadBel$preVisitorsApp
postVisitorsWeb = broadBel$postVisitorsApp
hours = broadBel$hours
weekdays = broadBel$weekdays
grossRating = broadBel$gross_rating_point
broadDumm = cbind(postVisitorsWeb, preVisitorsWeb, hours, weekdays, grossRating, dummiesDirectModel)
set.seed(21)
folds = 100
avBaseTrainError = vector(length = folds)
avBaseTestError = vector(length = folds)
avFullTrainError = vector(length = folds)
avFullTestError = vector(length = folds)
for (i in 1:folds){
sampleSplit = sample.split(broadBel$postVisitorsApp, SplitRatio = 0.8)
broadTrain = broadDumm[sampleSplit == TRUE,]
broadTest = broadDumm[sampleSplit == FALSE,]
# Baseline model
baselineModel = lm(postVisitorsWeb ~ preVisitorsWeb + hours + weekdays_dinsdag + weekdays_donderdag + weekdays_maandag +weekdays_vrijdag + weekdays_woensdag + weekdays_zondag, data = broadTrain)
# getModelSumm(baselineModel, TRUE)
avBaseTrainError[i] = rmse(broadTrain$postVisitorsWeb, predict(baselineModel, broadTrain))
avBaseTestError[i] = rmse(broadTest$postVisitorsWeb, predict(baselineModel, broadTest))
# Treatment effects only models
# treatmentOnlyModel = lm(postVisitors ~ .-preVisitors, data = broadTrain)
# rmse(broadTest$postVisitors, predict(treatmentOnlyModel, broadTest))
# Full treatment model
fullModel = lm(postVisitorsWeb ~ preVisitorsWeb + ., data = broadTrain)
# getModelSumm(fullModel, FALSE)
avFullTrainError[i] = rmse(broadTrain$postVisitorsWeb, predict(fullModel, broadTrain))
avFullTestError[i] = rmse(broadTest$postVisitorsWeb, predict(fullModel, broadTest))
}
mean(avBaseTrainError)
mean(avBaseTestError)
mean(avFullTrainError)
mean(avFullTestError)
## ================================================
##                Netherlands App regression
## ================================================
# Baseline models
baselineModel = lm(postVisitorsApp ~ preVisitorsApp + factor(hours) + weekdays, data = broadNet)
getModelSumm(baselineModel, TRUE)
# Full model
fullModel = lm(broadNet$postVisitorsApp ~ broadNet$preVisitorsApp + factor(broadNet$hours) + broadNet$gross_rating_point + ., data = dummiesDirectModel)
#save(fullModel, file = "my-fitted-boost.rda")
getModelSumm(fullModel, T)
# Baseline models -- BE APP
baselineModel = lm(postVisitorsApp ~ preVisitorsApp + factor(hours) + weekdays, data = broadBel)
getModelSumm(baselineModel, TRUE)
# Full model -- BE APP
fullModel = lm(broadBel$postVisitorsApp ~ broadBel$preVisitorsApp + factor(broadBel$hours) + broadBel$gross_rating_point + ., data = dummiesDirectModelBel)
getModelSumm(fullModel, T)
## ========================================================
##                    Overfitting Test App
## ========================================================
preVisitorsApp = broadNet$preVisitorsApp
postVisitorsApp = broadNet$postVisitorsApp
hours = broadNet$hours
grossRating = broadNet$gross_rating_point
broadDumm = cbind(postVisitorsApp, preVisitorsApp, hours, grossRating, dummiesDirectModel)
set.seed(21)
folds = 100
avBaseTrainError = vector(length = folds)
avBaseTestError = vector(length = folds)
avFullTrainError = vector(length = folds)
avFullTestError = vector(length = folds)
for (i in 1:folds){
sampleSplit = sample.split(broadNet$postVisitorsWeb, SplitRatio = 0.8)
broadTrain = broadDumm[sampleSplit == TRUE,]
broadTest = broadDumm[sampleSplit == FALSE,]
# Baseline model
baselineModel = lm(postVisitorsApp ~ preVisitorsApp + hours + weekdays_dinsdag + weekdays_donderdag + weekdays_maandag +weekdays_vrijdag + weekdays_woensdag + weekdays_zondag, data = broadTrain)
#getModelSumm(baselineModel, TRUE)
avBaseTrainError[i] = rmse(broadTrain$postVisitorsApp, predict(baselineModel, broadTrain))
avBaseTestError[i] = rmse(broadTest$postVisitorsApp, predict(baselineModel, broadTest))
# Treatment effects only models
#treatmentOnlyModel = lm(postVisitors ~ .-preVisitors, data = broadTrain)
#rmse(broadTest$postVisitors, predict(treatmentOnlyModel, broadTest))
# Full treatment model
fullModel = lm(postVisitorsApp ~ preVisitorsApp + ., data = broadTrain)
#getModelSumm(fullModel, FALSE)
avFullTrainError[i] = rmse(broadTrain$postVisitorsApp, predict(fullModel, broadTrain))
avFullTestError[i] = rmse(broadTest$postVisitorsApp, predict(fullModel, broadTest))
}
mean(avBaseTrainError)
mean(avBaseTestError)
mean(avFullTrainError)
mean(avFullTestError)
# Full model
fullModel = lm(broadNet$postVisitorsWeb ~ broadNet$preVisitorsWeb + factor(broadNet$hours) + broadNet$gross_rating_point + ., data = dummiesDirectModel)
getModelSumm(fullModel, T)
save(fullModel, file = "fullModelSaved.rda")
getwd()
load(fullModelSaved.rda)
getwd()
load("fullModelSaved.rda")
fullModel = load(fullModelSaved.rda)
fullModel = load("fullModelSaved.rda")
runApp('RShinyErik.R')
fullModel = load("fullModelSaved.rda")
fullModel
load("fullModelSaved.rda")
fullModel
runApp('RShinyErik.R')
runApp('RShinyErik.R')
class(fullModel$coefficients)
fullCoef = as.data.frame(fullModel$coefficients)
channels = unique(broadNet$channel)
runApp('RShinyErik.R')
dim(fullModel$coefficients)
length(fullModel$coefficients)
runApp('RShinyErik.R')
runApp('RShinyErik.R')
runApp('RShinyErik.R')
runApp('RShinyErik.R')
runApp('RShinyErik.R')
runApp('RShinyErik.R')
runApp('RShinyErik.R')
runApp('RShinyErik.R')
runApp('RShinyErik.R')
runApp('RShinyErik.R')
runApp('RShinyErik.R')
runApp('RShinyErik.R')
runApp('RShinyErik.R')
runApp('RShinyErik.R')
runApp('RShinyErik.R')
names(fullModel$coefficients)
runApp('RShinyErik.R')
runApp('RShinyErik.R')
runApp('RShinyErik.R')
runApp('RShinyErik.R')
runApp('RShinyErik.R')
library(shiny); runApp('RShinyErik.R')
runApp('RShinyErik.R')
runApp('RShinyErik.R')
getModelSumm(fullModel, T)
# Full model
fullModel = lm(broadNet$postVisitorsWeb ~ broadNet$preVisitorsWeb + factor(broadNet$hours) + broadNet$gross_rating_point + ., data = dummiesDirectModel)
getModelSumm(fullModel, T)
library("chron")
library("ggplot2")
library("lubridate")
library("data.table")
library("caTools")
library("fastDummies")
library("zoo")
library("CausalImpact")
library("factoextra")
library("fastDummies")
library("lmtest") # use the variance estimator in a linear model
library("sandwich") # computes robust covariance matrix estimators
library("stats") # AIC, BIC
library("Metrics") # rmse calc
library("plyr")
library("gtrendsR")
library("tseries")
library("seastests")
library("pastecs")
library("plotrix")
getModelSumm(fullModel, T)
names(broadNet)
names(dummiesDirectModel)
runApp('RShinyErik.R')
# Full model
fullModel = lm(broadNet$postVisitorsWeb ~ broadNet$preVisitorsWeb + factor(broadNet$hours) + broadNet$gross_rating_point + ., data = dummiesDirectModel)
runApp('RShinyErik.R')
fullModel
dim(fullModel$coefficients)
length(fullModel$coefficients)
?zeros
?dataframe
?as.data.frame
?matrix
testdf = as.data.frame(matrix(data = 0, nrow = 1, ncol = 64))
testdf
names(testdf) = names(fullModel$coefficients)
predict(fullModel, testdf)
names(testdf)
names(testdf) = gsub("`", "", names(fullModel$coefficients))
names(testdf)
predict(fullModel, testdf)
testdf
predict(fullModel, testdf)
# Full model
imput = cbind(broadNet$postVisitorsWeb, broadNet$preVisitorsWeb, factor(broadNet$hours), broadNet$gross_rating_point, dummiesDirectModel)
# Full model
input = cbind(broadNet$postVisitorsWeb, broadNet$preVisitorsWeb, factor(broadNet$hours), broadNet$gross_rating_point, dummiesDirectModel)
names(input)
fullModel
fullModel = lm(broadNet$postVisitorsWeb ~ ., data = input)
fullModel
summary(input)
# Full model
input = cbind(broadNet$postVisitorsWeb, broadNet$preVisitorsWeb, factor(broadNet$hours), broadNet$gross_rating_point, dummiesDirectModel)
fullModel = lm(broadNet$postVisitorsWeb ~ ., data = input)
testdf = as.data.frame(matrix(data = 0, nrow = 1, ncol = 64))
names(testdf) = gsub("`", "", names(input))
predict(fullModel, testdf)
names(testdf) = names(input)
predict(fullModel, testdf)
input = cbind(broadNet$postVisitorsWeb, broadNet$preVisitorsWeb, factor(broadNet$hours), broadNet$gross_rating_point, dummiesDirectModel)
fullModel = lm(broadNet$postVisitorsWeb ~ ., data = input)
testdf = as.data.frame(matrix(data = 0, nrow = 1, ncol = 64))
names(testdf) = names(input)
predict(fullModel, testdf)
predict(fullModel, input)
predict(fullModel)
input
summary(input)
predict(fullModel)
?predict
predict(fullModel, input[1,:])
predict(fullModel, input[1,])
input[1,] = as.data.frame(matrix(data = 0, nrow = 1, ncol = 64))
input[1,]
dim(input)
# Full model
input = cbind(broadNet$postVisitorsWeb, broadNet$preVisitorsWeb, factor(broadNet$hours), broadNet$gross_rating_point, dummiesDirectModel)
dim(input)
names(input)
input[1,] = as.data.frame(matrix(data = 0, nrow = 1, ncol = 46))
predict(fullModel, input[1,])
input[1,] = as.data.frame(matrix(data = 1, nrow = 1, ncol = 46))
predict(fullModel, input[1,])
input[1,] = as.data.frame(matrix(data = 2, nrow = 1, ncol = 46))
predict(fullModel, input[1,])
input[1,] = as.data.frame(matrix(data = 0, nrow = 1, ncol = 46))
predict(fullModel, input[1,])
# Full model
input = cbind(broadNet$postVisitorsWeb, broadNet$preVisitorsWeb, factor(broadNet$hours), broadNet$gross_rating_point, dummiesDirectModel)
input[1,]
fullModel = lm(broadNet$postVisitorsWeb ~ broadNet$preVisitorsWeb + factor(broadNet$hours) + broadNet$gross_rating_point + ., data = dummiesDirectModel)
fullModel = lm(broadNet$postVisitorsWeb ~ ., data = input)
fullModel = lm(broadNet$postVisitorsWeb ~ broadNet$preVisitorsWeb + factor(broadNet$hours) + broadNet$gross_rating_point + ., data = dummiesDirectModel)
fullModel
fullModel = lm(broadNet$postVisitorsWeb ~ ., data = input)
fullModel
fullModel = lm(broadNet$postVisitorsWeb ~ ., data = input)
length(fullModel$coefficients)
fullModel = lm(broadNet$postVisitorsWeb ~ broadNet$preVisitorsWeb + factor(broadNet$hours) + broadNet$gross_rating_point + ., data = dummiesDirectModel)
length(fullModel$coefficients)
fullModel = lm(broadNet$postVisitorsWeb ~ ., data = input)
fullModel
fullModel = lm('broadNet$postVisitorsWeb' ~ ., data = input)
names(input)
fullModel = lm("broadNet$postVisitorsWeb" ~ ., data = input)
fullModel = lm(broadNet$postVisitorsWeb ~ . - broadNet$postVisitorsWeb , data = input)
length(fullModel$coefficients)
length(names(input))
names(input)
# Full model
fullModel = lm(broadNet$postVisitorsWeb ~ broadNet$preVisitorsWeb + factor(broadNet$hours) + broadNet$gross_rating_point + ., data = dummiesDirectModel)
dummiesDirectModel
?lm
fullModel$call
fullModel$terms
fullModel$x
fullModel$fitted.values
fullModel$x
fullModel$y
# Full model
fullModel = lm(broadNet$postVisitorsWeb ~ broadNet$preVisitorsWeb + factor(broadNet$hours) + broadNet$gross_rating_point + ., data = dummiesDirectModel)
testdf = as.data.frame(matrix(data = 0, nrow = 1, ncol = 64))
names(testdf) = names(fullModel$coefficients)
predict(fullModel, testdf)
testdf = as.data.frame(matrix(data = 0, nrow = 1, ncol = 46))
names(testdf) = names(fullModel$coefficients)
testdf = as.data.frame(matrix(data = 0, nrow = 1, ncol = 64))
# Full model
input = as.data.frame(cbind(broadNet$postVisitorsWeb, broadNet$preVisitorsWeb, factor(broadNet$hours), broadNet$gross_rating_point, dummiesDirectModel))
View(input)
dim(input)
names(input)
names(input)[1]
names(input)[1:4] = c("postVisitorsWeb", "preVisitorsWeb", "hours)", "gross_rating_point")
names(input)
fullModelTest = lm(postVisitorsWeb ~ . data = input)
fullModelTest = lm(postVisitorsWeb ~ ., data = input)
fullModelTest
fullModelTest = lm(postVisitorsWeb ~ ., data = input)
fullModelTest = lm(postVisitorsWeb ~ ., data = input)
dim(input)
testdf = as.data.frame(matrix(data = 0, nrow = 1, ncol = 46))
names(testdf) = names(input)
predict(fullModelTest, testdf)
names(input)
# Full model
input = as.data.frame(cbind(broadNet$postVisitorsWeb, broadNet$preVisitorsWeb, factor(broadNet$hours), broadNet$gross_rating_point, dummiesDirectModel))
names(input)[1:4] = c("postVisitorsWeb", "preVisitorsWeb", "hours", "gross_rating_point")
fullModel = lm(broadNet$postVisitorsWeb ~ broadNet$preVisitorsWeb + factor(broadNet$hours) + broadNet$gross_rating_point + ., data = dummiesDirectModel)
fullModelTest = lm(postVisitorsWeb ~ ., data = input)
testdf = as.data.frame(matrix(data = 0, nrow = 1, ncol = 46))
names(testdf) = names(input)
predict(fullModelTest, testdf)
testdf
names(input)
testdf["hours"] = factor(testdf["hours"])
predict(fullModelTest, testdf)
fullModel = lm(broadNet$postVisitorsWeb ~ broadNet$preVisitorsWeb + factor(broadNet$hours) + broadNet$gross_rating_point + ., data = dummiesDirectModel)
fullModel
fullModelTest
save(fullModelTest, file = "fullModelSaved.rda")
# Full model
input = as.data.frame(cbind(broadNet$postVisitorsWeb, broadNet$preVisitorsWeb, factor(broadNet$hours), broadNet$gross_rating_point, dummiesDirectModel))
names(input)[1:4] = c("postVisitorsWeb", "preVisitorsWeb", "hours", "gross_rating_point")
fullModel = lm(broadNet$postVisitorsWeb ~ broadNet$preVisitorsWeb + factor(broadNet$hours) + broadNet$gross_rating_point + ., data = dummiesDirectModel)
fullModelTest = lm(postVisitorsWeb ~ ., data = input)
testdf = as.data.frame(matrix(data = 0, nrow = 1, ncol = 46))
names(testdf) = names(fullModelTest$coefficients)
testdf["hours"] = factor(testdf["hours"])
predict(fullModelTest, testdf)
input = as.data.frame(cbind(broadNet$postVisitorsWeb, broadNet$preVisitorsWeb, factor(broadNet$hours), broadNet$gross_rating_point, dummiesDirectModel))
names(input)[1:4] = c("postVisitorsWeb", "preVisitorsWeb", "hours", "gross_rating_point")
fullModel = lm(broadNet$postVisitorsWeb ~ broadNet$preVisitorsWeb + factor(broadNet$hours) + broadNet$gross_rating_point + ., data = dummiesDirectModel)
fullModelTest = lm(postVisitorsWeb ~ ., data = input)
testdf = as.data.frame(matrix(data = 0, nrow = 1, ncol = 46))
names(testdf) = names(input)
testdf["hours"] = factor(testdf["hours"])
predict(fullModelTest, testdf)
getModelSumm(fullModel, T)
save(testdf, file = "testdf")
runApp('RShinyErik.R')
install.packages("shinyWidgets")
runApp('RShinyMarjo.R')
runApp('RShinyMarjo.R')
runApp('RShinyMarjo.R')
library(shiny); runApp('RShinyMarjo.R')
library("chron")
library("ggplot2")
library("lubridate")
library("data.table")
library("caTools")
library("fastDummies")
library("zoo")
library("CausalImpact")
library("factoextra")
library("fastDummies")
library("lmtest") # use the variance estimator in a linear model
library("sandwich") # computes robust covariance matrix estimators
library("stats") # AIC, BIC
library("Metrics") # rmse calc
library("plyr")
library("gtrendsR")
library("tseries")
library("seastests")
library("pastecs")
library("plotrix")
runApp('RShinyMarjo.R')
runApp('RShinyMarjo.R')
runApp('RShinyMarjo.R')
library("shiny")
library("shinydashboard")
library("shinyWidgets")
library("stringr")
runApp('RShinyMarjo.R')
runApp('Shiny')
runApp('Shiny')
runApp('Shiny')
runApp('Shiny')
runApp('Shiny')
runApp('Shiny')
# Full model
input = as.data.frame(cbind(broadNet$postVisitorsWeb, broadNet$preVisitorsWeb, factor(broadNet$hours), broadNet$gross_rating_point, dummiesDirectModel))
names(input)[1:4] = c("postVisitorsWeb", "preVisitorsWeb", "hours", "gross_rating_point")
fullModel = lm(broadNet$postVisitorsWeb ~ broadNet$preVisitorsWeb + factor(broadNet$hours) + broadNet$gross_rating_point + ., data = dummiesDirectModel)
fullModelTest = lm(postVisitorsWeb ~ ., data = input)
testdf = as.data.frame(matrix(data = 0, nrow = 1, ncol = 46))
names(testdf) = names(input)
testdf["hours"] = factor(testdf["hours"])
predict(fullModelTest, testdf)
testdf["hours"] = 1
testdf["hours"] = factor(testdf["hours"])
predict(fullModelTest, testdf)
testdf["hours"] = 4
testdf["hours"] = factor(testdf["hours"])
predict(fullModelTest, testdf)
testdf["hours"] = 9
testdf["hours"] = factor(testdf["hours"])
predict(fullModelTest, testdf)
save(fullModelTest, file = "fullModelSaved.rda")
save(testdf, file = "testdf")
names(testdf)
testdf
runApp('Shiny')
save(testdf, file = "testdf.rda")
runApp('Shiny')
runApp('Shiny')
input = as.data.frame(cbind(broadNet$postVisitorsWeb, broadNet$preVisitorsWeb, factor(broadNet$hours), broadNet$gross_rating_point, dummiesDirectModel))
names(input)[1:4] = c("postVisitorsWeb", "preVisitorsWeb", "hours", "gross_rating_point")
fullModel = lm(broadNet$postVisitorsWeb ~ broadNet$preVisitorsWeb + factor(broadNet$hours) + broadNet$gross_rating_point + ., data = dummiesDirectModel)
fullModelTest = lm(postVisitorsWeb ~ ., data = input)
testdf = as.data.frame(matrix(data = 0, nrow = 1, ncol = 46))
names(testdf) = names(input)
testdf["hours"] = factor(testdf["hours"])
predict(fullModelTest, testdf)
input = as.data.frame(cbind(broadNet$postVisitorsWeb, broadNet$preVisitorsWeb, factor(broadNet$hours), broadNet$gross_rating_point, dummiesDirectModel))
names(input)[1:4] = c("postVisitorsWeb", "preVisitorsWeb", "hours", "gross_rating_point")
fullModel = lm(broadNet$postVisitorsWeb ~ broadNet$preVisitorsWeb + factor(broadNet$hours) + broadNet$gross_rating_point + ., data = dummiesDirectModel)
fullModelTest = lm(postVisitorsWeb ~ ., data = input)
testdf = as.data.frame(matrix(data = 0, nrow = 1, ncol = 46))
names(testdf) = names(input)
testdf["hours"] = factor(testdf["hours"])
predict(fullModelTest, testdf)
save(fullModelTest, file = "fullModelSaved.rda")
save(testdf, file = "testdf.rda")
runApp('Shiny')
runApp('Shiny')
load("testdf.rda")
load("testdf.rda")
testdf
load("fullModelSaved.rda")
predict(fullModel, testdf)
testdf["hours"] = factor(testdf["hours"])
predict(fullModel, testdf)
runApp('Shiny')
runApp('Shiny')
runApp('Shiny')
runApp('Shiny')
predict(fullModelTest, testdf)
runApp('Shiny')
runApp('Shiny')
class(predict(fullModelTest, testdf))
runApp('Shiny')
runApp('Shiny')
runApp('Shiny')
runApp('Shiny')
runApp('Shiny')
testdf
any(duplicated(testdf[,1]))
runApp('Shiny')
runApp('Shiny')
runApp('Shiny')
runApp('Shiny')
runApp('Shiny')
runApp('Shiny')
runApp('Shiny')
runApp('Shiny')
runApp('Shiny')
names(testdf)
runApp('Shiny')
names(testdf)[7:30]
names(testdf)[7:40]
names(testdf)[7:35]
names(testdf)[7:34]
runApp('Shiny')
names(currentdf)
names(testdf)
runApp('Shiny')
2
runApp('Shiny')
predict(fullModelTest, currentdf)
predict(fullModelTest, testdf)
?predict
predict(fullModelTest, testdf, interval = "prediction")
predict(fullModelTest, testdf, interval = "confidence")
predict(fullModelTest, testdf, interval = "confidence", level = 0.5)
predict(fullModelTest, testdf, interval = "confidence", level = 0.8)
fullModel
fullModelTest
runApp('Shiny')
predict(fullModelTest, testdf, interval = "prediction")
predict(fullModelTest, testdf, interval = "confidence")
predict(fullModelTest, testdf, interval = "confidence", level= 0.5)
predict(fullModelTest, testdf, interval = "prediction")
runApp('Shiny')
predict(fullModelTest, testdf, interval = "prediction")
predict(fullModelTest, testdf, interval = "prediction")[1]
predict(fullModelTest, testdf, interval = "prediction")[3]
runApp('Shiny')
runApp('Shiny')
runApp('Shiny')
runApp('Shiny')
runApp('Shiny')
runApp('Shiny')
runApp('Shiny')
runApp('Shiny')
runApp('Shiny')
runApp('Shiny')
1
2
fdsa
d
1
install.packages("varhandle")
runApp('RShinyMarjo.R')
runApp('Shiny')
runApp('Shiny')
runApp('Shiny')
runApp('Shiny')
install.packages('rsconnect')
rsconnect::setAccountInfo(name='lennard',
token='EB57F07EA3B65657B347368FD4806657',
secret='F+crgCAsrr8bi4UnTsaLDfqBX1joO5W3J4zR9dky')
library(rsconnect)
rsconnect::deployApp('C:/Users/Probook/Documents/Repos/SeminarCoolblueTV/Shiny/app')
rsconnect::deployApp('C:/Users/Probook/Documents/Repos/SeminarCoolblueTV/Shiny/app.R')
rsconnect::deployApp('C:/Users/Probook/Documents/Repos/SeminarCoolblueTV/Shiny')
rsconnect::deployApp('C:/Users/Probook/Documents/Repos/SeminarCoolblueTV/Shiny')
rsconnect::deployApp('C:/Users/Probook/Documents/Repos/SeminarCoolblueTV/Shiny')
broadNet
dim(broadNet)
save(broadNet, file = "broadNet.rda")
dim(visitorsSum)
save(visitorsSum, file = "visitorsSum.rda")
install.packages("varhandle")
rsconnect::deployApp('C:/Users/Probook/Documents/Repos/SeminarCoolblueTV/Shiny')
runApp('Shiny')
runApp('Shiny')
