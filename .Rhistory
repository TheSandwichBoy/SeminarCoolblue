avBroadDayNet = matrix(NA, 24)
broadNet = broadNet[order(broadNet$date),]
for (i in 1:24){
broadSubset = subset(broadNet, (time_min >= (i - 1) * 60) & (time_min < i * 60))
avBroadDayNet[i] = nrow(broadSubset)/amountDays
}
broadNet = broadNet[order(as.numeric(row.names(broadNet))),]
# calculate average amount of broadcasts -- Belgium
avBroadDayBel = matrix(NA, 24)
broadBel = broadBel[order(broadBel$date),]
for (i in 1:24){
broadSubset = subset(broadBel, (time_min >= (i - 1) * 60) & (time_min < i * 60))
avBroadDayBel[i] = nrow(broadSubset)/amountDays
}
broadBel = broadBel[order(as.numeric(row.names(broadBel))),]
# amount of advertisements per day -- Total
adAmount = matrix(0, amountDays)
for (i in 1:amountDays){
iDate = as.Date(i - 1, origin = "2019-01-01")
adsIDate = sum(broad$date == iDate)
adAmount[i] = adsIDate
}
# amount of advertisements per day
adAmountNet = as.matrix(table(broadNet$date))
adAmountBel = as.matrix(table(broadBel$date))
## ========================================================
##      CREATING DUMMIES FOR DAILY TRAFFIC (time series)
## ========================================================
# national holidays
holidaysNames = c("Nieuwjaarsdag", "Goede Vrijdag", "Eerste Paasdag",
"Tweede Paasdag", "Koningsdag", "Bevrijdingsdag",
"Hemelvaartsdag", "Eerste Pinksterdag",
"Tweede Pinksterdag")
holidaysDates = c("2019-01-01", "2019-04-19", "2019-04-21", "2019-04-22",
"2019-04-27", "2019-05-05", "2019-05-30", "2019-06-09",
"2019-06-10")
dummyHolidays = matrix(0, nrow = amountDays)
for (i in 1:length(holidaysDates)) {
index = yday(holidaysDates[i])
dummyHolidays[index] = 1
}
dummyHemelvaartsdag = matrix(0, nrow = amountDays)
dummyHemelvaartsdag[yday(holidaysDates[7])] = 1
# weekday and week dummies
allDates = sort(unique(traffic$date))
allweekdays = weekdays(as.Date(allDates))
dummyWeekdays = dummy_cols(allweekdays) # column 2 = monday, 8 = sunday
dummyWeekdays = cbind(allDates, dummyWeekdays[, c(4, 2, 6, 3, 5, 7, 8)])
colnames(dummyWeekdays) = c("data", "mondag", "tuesday", "wednesday", "thursday", "friday", "saturday", "sunday")
# month dummies
dummyMonths = dummy_cols(month(allDates))
dummyMonths = cbind(allDates, dummyMonths[, 2:7]) # column 2 = Jan, 7 = Jun
colnames(dummyMonths) = c("data", "January", "February", "March", "April", "May", "June")
# ads dummies
dummyAdsTot = matrix(rep(0), nrow = amountDays)
for (i in 1:length(uniqueDates)) {
index = yday(uniqueDates[i])
dummyAdsTot[index] = 1
}
dummyAdsNet = matrix(rep(0), nrow = amountDays)
for (i in 1:length(uniqueDatesNet)) {
index = yday(uniqueDatesNet[i])
dummyAdsNet[index] = 1
}
dummyAdsBel = matrix(rep(0), nrow = amountDays)
for (i in 1:length(uniqueDatesBel)) {
index = yday(uniqueDatesBel[i])
dummyAdsBel[index] = 1
}
dummyAds = cbind(dummyAdsTot, dummyAdsNet, dummyAdsBel) # 1=Tot, 2=NL, 3=BE
colnames(dummyAds) = c("Ads Total","Ads Netherlands","Ads Belgium")
rm(dummyAdsTot); rm(dummyAdsNet); rm(dummyAdsBel)
## ========================================================
##    Create dummies for commercials (direct effects)
## ========================================================
# Weekdays dummiess
broad$weekdays = 0
for (i in 1:nBroad){
broad$weekdays[i] = weekdays(as.Date(broad$date[i]))
}
# Hourly dummies
broad$hours = factor(floor(24*as.numeric(times(broad$time))))
# Begin, middle and end for position in break
broad['position_in_break_3option'] = 0
for (i in 1:nBroad) {
if(broad$position_in_break[i] == "0" || broad$position_in_break[i] == "1" || broad$position_in_break[i] == "2" ||
broad$position_in_break[i] == "First Position" || broad$position_in_break[i] == "Second Position") {
broad$position_in_break_3option[i] = "begin"
} else if (broad$position_in_break[i] == "3" || broad$position_in_break[i] == "4" || broad$position_in_break[i] == "5" ||
broad$position_in_break[i] == "6" || broad$position_in_break[i] == "7" || broad$position_in_break[i] == "8" ||
broad$position_in_break[i] == "9" || broad$position_in_break[i] == "10" || broad$position_in_break[i] == "11" ||
broad$position_in_break[i] == "12" || broad$position_in_break[i] == "13" || broad$position_in_break[i] == "14" ||
broad$position_in_break[i] == "15" || broad$position_in_break[i] == "16" || broad$position_in_break[i] == "17" ||
broad$position_in_break[i] == "18" || broad$position_in_break[i] == "19" || broad$position_in_break[i] == "20" ||
broad$position_in_break[i] == "Any Other Position") {
broad$position_in_break_3option[i] = "middle"
} else if (broad$position_in_break[i] == "21" || broad$position_in_break[i] == "22" || broad$position_in_break[i] == "23" ||
broad$position_in_break[i] == "24" || broad$position_in_break[i] == "25" || broad$position_in_break[i] == "98" ||
broad$position_in_break[i] == "99" || broad$position_in_break[i] == "Before Last Position" ||
broad$position_in_break[i] == "Last Position") {
broad$position_in_break_3option[i] = "end"
}
}
# Overlap dummy
broadNet = subset(broad, country == 'Netherlands')
broadBel = subset(broad, country == 'Belgium')
intervalSize = 5
iNet = 0
iBel = 0
broad = broad[order(broad$date_time),]
broadNet = broadNet[order(broadNet$date_time),]
broadBel = broadBel[order(broadBel$date_time),]
broad$overlapBefore = 0
broad$overlapAfter = 0
for (i in 1:nrow(broad)){
if (broad$country[i] == 'Netherlands'){
iNet = iNet + 1
#print(i)
datetime = broad$date_time[i]
datetime = as.POSIXct(datetime)
timeEarlier = datetime - intervalSize * 60
timeLater = datetime + intervalSize * 60
# Interval before
if (iNet > 1){ # exclude first dutch commercial
if (timeEarlier <= broadNet$date_time[iNet - 1] && broadNet$date_time[iNet - 1] <= datetime){
broad$overlapBefore[i] = 1
}
}
# Interval after
if (iNet < nrow(broadNet)){ # exclude last dutch commercial
if (datetime <= broadNet$date_time[iNet + 1] && broadNet$date_time[iNet + 1] <= timeLater){
broad$overlapAfter[i] = 1
}
}
}
if (broad$country[i] == 'Belgium'){
iBel = iBel + 1
#print(i)
datetime = broad$date_time[i]
datetime = as.POSIXct(datetime)
timeEarlier = datetime - intervalSize * 60
timeLater = datetime + intervalSize * 60
# Interval before
if (iBel > 1){
if (timeEarlier <= broadBel$date_time[iBel - 1] && broadBel$date_time[iBel - 1] <= datetime){
broad$overlapBefore[i] = 1
}
}
# Interval after
if (iBel < nrow(broadBel)){
if (datetime <= broadBel$date_time[iBel + 1] && broadBel$date_time[iBel + 1] <= timeLater){
broad$overlapAfter[i] = 1
}
}
}
}
broad = broad[order(as.numeric(row.names(broad))),]
broadNet = broadNet[order(as.numeric(row.names(broadNet))),]
broadBel = broadBel[order(as.numeric(row.names(broadBel))),]
broadNet = subset(broad, country == 'Netherlands')
broadBel = subset(broad, country == 'Belgium')
## =================================================
##   Create matrices with dummies (direct effects)
## =================================================
# Include in baseline models
# preVisitors
# hour (7-1)
# weekday (23-1)
# Include in full model (treatment effect)
# we exclude the most freq. dummy for biggest set of commercials (WebNet, WebBel)
# 1. Product category: (3-1) ("wasmachines", "televisies", "laptops")
# 2. TV channel (max. 51-1)
# 2. Length of spot: (3-1) ("30", "30+10", "30+10+5")
# 3. Position in break: (3-1) ("begin", "middle", "end")
# 5. Overlap with other commercial: 2 (overlap_before, overlap_after)
# 6. GRP (no dummy)
# We will continue with Web-NL
broadNet = subset(broad, country == "Netherlands")
broadBel = subset(broad, country == "Belgium")
broadNetNoMidnight = subset(broadNet, broadNet$time_min < 1435)
broadNetNoMidnight = subset(broadNetNoMidnight, broadNetNoMidnight$time_min > 5)
broadNet = broadNetNoMidnight
# dummiesDirectModel Netherlands contains the treatment variables
variablesDirectModel = c("product_category", "channel", "length_of_spot", "position_in_break_3option", "weekdays", "overlapBefore", "overlapAfter")
dummiesDirectModelPre = dummy_cols(.data = broadNet, select_columns = variablesDirectModel, remove_most_frequent_dummy = T)
dummiesDirectModel = dummiesDirectModelPre[,((ncol(broadNet)+1):ncol(dummiesDirectModelPre))]
dummiesDirectModel = as.data.frame(dummiesDirectModel)
rm(dummiesDirectModelPre); rm(variablesDirectModel)
# dummiesDirectModel for Belgium
# TODO: overlap dummies komen niet in Belgische data
variablesDirectModelBel = c("channel", "position_in_break_3option", "weekdays", "overlapBefore", "overlapAfter") # waarom missen 2 dummie-var?
dummiesDirectModelPreBel = dummy_cols(.data = broadBel, select_columns = variablesDirectModelBel, remove_most_frequent_dummy = T)
dummiesDirectModelBel = dummiesDirectModelPreBel[,((ncol(broadBel)+1):ncol(dummiesDirectModelPreBel))]
dummiesDirectModelBel = as.data.frame(dummiesDirectModelBel)
rm(dummiesDirectModelPreBel); rm(variablesDirectModelBel)
# automate with non singular names (wordt dit nog gebruikt?)
removeNonSingular <- function(model, data) {
naCoef = names(which(is.na(coef(model))))
naCoef = gsub('`', '', naCoef)
data = data[, !(names(data) %in% naCoef )]
data
}
# count visits pre-commercial
broad['preVisitorsWeb'] = 0
broad['postVisitorsWeb'] = 0
broad['preVisitorsApp'] = 0
broad['postVisitorsApp'] = 0
intervalSize
start = Sys.time()
for (i in 1:nBroad) { # nBroad
broadDate = broad$date[[i]]
broadTime = broad$time_min[[i]]
broadCountry = broad$country[[i]]
if(broadCountry == "Belgium") {
if(broadTime - intervalSize < 0) {
#extraVis of day before
preVisitorsAppExtra = sum(subset(visitorsSum, date == as.Date(broadDate) - 1 & time_min >= 60*24 + broadTime - intervalSize)$visitsAppBel)
preVisitorsWebExtra = sum(subset(visitorsSum, date == as.Date(broadDate) - 1 & time_min >= 60*24 + broadTime - intervalSize)$visitsWebBel)
} else if(broadTime + intervalSize >= 60*24) {
#extraVis on day after
postVisitorsAppExtra = sum(subset(visitorsSum, date == as.Date(broadDate) - 1 & time_min <= intervalSize - 60*24 + broadTime)$visitsAppBel)
postVisitorsWebExtra = sum(subset(visitorsSum, date == as.Date(broadDate) - 1 & time_min <= intervalSize - 60*24 + broadTime)$visitsWebBel)
} else {
preVisitorsAppExtra = 0; preVisitorsWebExtra = 0; postVisitorsAppExtra = 0; postVisitorsWebExtra = 0;
}
broad$preVisitorsApp[[i]] = sum(subset(visitorsSum, date == broadDate & time_min < broadTime & time_min >= broadTime - intervalSize)$visitsAppBel) + preVisitorsAppExtra
broad$preVisitorsWeb[[i]] = sum(subset(visitorsSum, date == broadDate & time_min < broadTime & time_min >= broadTime - intervalSize)$visitsWebBel) + preVisitorsWebExtra
broad$postVisitorsApp[[i]] = sum(subset(visitorsSum, date == broadDate  & time_min >= broadTime & time_min < broadTime + intervalSize)$visitsAppBel) + postVisitorsAppExtra
broad$postVisitorsWeb[[i]] = sum(subset(visitorsSum, date == broadDate & time_min >= broadTime & time_min < broadTime + intervalSize)$visitsWebBel) + postVisitorsWebExtra
} else if(broadCountry == "Netherlands") {
if(broadTime - intervalSize < 0) {
#extraVis of day before
preVisitorsAppExtra = sum(subset(visitorsSum, date == as.Date(broadDate) - 1 & time_min >= 60*24 + broadTime - intervalSize)$visitsAppNet)
preVisitorsWebExtra = sum(subset(visitorsSum, date == as.Date(broadDate) - 1 & time_min >= 60*24 + broadTime - intervalSize)$visitsWebNet)
} else if(broadTime + intervalSize >= 60*24) {
#extraVis on day after
postVisitorsAppExtra = sum(subset(visitorsSum, date == as.Date(broadDate) - 1 & time_min <= intervalSize - 60*24 + broadTime)$visitsAppNet)
postVisitorsWebExtra = sum(subset(visitorsSum, date == as.Date(broadDate) - 1 & time_min <= intervalSize - 60*24 + broadTime)$visitsWebNet)
} else {
preVisitorsAppExtra = 0; preVisitorsWebExtra = 0; postVisitorsAppExtra = 0; postVisitorsWebExtra = 0;
}
broad$preVisitorsApp[[i]] = sum(subset(visitorsSum, date == broadDate & time_min < broadTime & time_min >= broadTime - intervalSize)$visitsAppNet) + preVisitorsAppExtra
broad$preVisitorsWeb[[i]] = sum(subset(visitorsSum, date == broadDate & time_min < broadTime & time_min >= broadTime - intervalSize)$visitsWebNet) + preVisitorsWebExtra
broad$postVisitorsApp[[i]] = sum(subset(visitorsSum, date == broadDate & time_min >= broadTime & time_min < broadTime + intervalSize)$visitsAppNet) + postVisitorsAppExtra
broad$postVisitorsWeb[[i]] = sum(subset(visitorsSum, date == broadDate & time_min >= broadTime & time_min < broadTime + intervalSize)$visitsWebNet) + postVisitorsWebExtra
}
if(i %% 100 == 0) {print(paste(i,Sys.time() - start))}
}
1
# broad for Netherlands and Belgium
broadNet = subset(broad, country == 'Netherlands')
broadBel = subset(broad, country == 'Belgium')
broadNetNoMidnight = subset(broadNet, broadNet$time_min < 1435)
broadNetNoMidnight = subset(broadNetNoMidnight, broadNetNoMidnight$time_min > 5)
broadNet = broadNetNoMidnight
broadBelNoMidnight = subset(broadBel, broadBel$time_min < 1435)
broadBelNoMidnight = subset(broadBelNoMidnight, broadBelNoMidnight$time_min > 5)
## ========================================================
##                    First analysis
## ========================================================
# website analysis
mean(broad$postVisitorsWeb - broad$preVisitorsWeb)
min(broad$postVisitorsWeb - broad$preVisitorsWeb)
max(broad$postVisitorsWeb - broad$preVisitorsWeb)
sum(broad$postVisitorsWeb > broad$preVisitorsWeb)
sum(broad$postVisitorsWeb < broad$preVisitorsWeb)
# data plotting website
plot(broad$preVisitorsWeb, broad$postVisitorsWeb)
lines(cbind(0,10000), cbind(0,10000))
par(mfrow=c(2,1))
hist(broad$postVisitorsWeb, xlim = c(0,3))
hist(broad$preVisitorsWeb, xlim = c(0,3))
par(mfrow=c(1,1))
simpleModelWeb = lm(broad$postVisitorsWeb ~ broad$preVisitorsWeb + 0)
summary(simpleModelWeb)
# Website NL
mean(broadNet$postVisitorsWeb - broadNet$preVisitorsWeb)
min(broadNet$postVisitorsWeb - broadNet$preVisitorsWeb)
max(broadNet$postVisitorsWeb - broadNet$preVisitorsWeb)
sum(broadNet$postVisitorsWeb > broadNet$preVisitorsWeb)
sum(broadNet$postVisitorsWeb < broadNet$preVisitorsWeb)
# data plotting website
plot(broadNet$preVisitorsWeb, broadNet$postVisitorsWeb)
lines(cbind(0,10000), cbind(0,10000))
par(mfrow=c(2,1))
hist(broadNet$postVisitorsWeb, xlim = c(0,3))
hist(broadNet$preVisitorsWeb, xlim = c(0,3))
par(mfrow=c(1,1))
simpleModelWebNet = lm(broadNet$postVisitorsWeb ~ broadNet$preVisitorsWeb + 0)
summary(simpleModelWebNet)
# Website BE
mean(broadBel$postVisitorsWeb - broadBel$preVisitorsWeb)
min(broadBel$postVisitorsWeb - broadBel$preVisitorsWeb)
max(broadBel$postVisitorsWeb - broadBel$preVisitorsWeb)
sum(broadBel$postVisitorsWeb > broadBel$preVisitorsWeb)
sum(broadBel$postVisitorsWeb < broadBel$preVisitorsWeb)
# data plotting website
plot(broadBel$preVisitorsWeb, broadBel$postVisitorsWeb)
lines(cbind(0,10000), cbind(0,10000))
par(mfrow=c(2,1))
hist(broadBel$postVisitorsWeb, xlim = c(0,3))
hist(broadBel$preVisitorsWeb, xlim = c(0,3))
par(mfrow=c(1,1))
simpleModelWebBel = lm(broadBel$postVisitorsWeb ~ broadBel$preVisitorsWeb + 0)
summary(simpleModelWebBel)
# App analysis
mean(broad$postVisitorsApp - broad$preVisitorsApp)
min(broad$postVisitorsApp - broad$preVisitorsApp)
max(broad$postVisitorsApp - broad$preVisitorsApp)
sum(broad$postVisitorsApp > broad$preVisitorsApp)
sum(broad$postVisitorsApp < broad$preVisitorsApp)
# data plotting (app)
plot(broad$preVisitorsApp, broad$postVisitorsApp, xlim = c(0,0.2)) # deze plot....
lines(cbind(0,10000), cbind(0,10000))
par(mfrow=c(2,1))
hist(broad$postVisitorsApp)
hist(broad$preVisitorsApp)
par(mfrow=c(1,1))
simpleModelApp = lm(broad$postVisitorsApp ~ broad$preVisitorsApp + 0)
summary(simpleModelApp)
biggestAds = subset(broad, postVisitorsWeb-preVisitorsWeb > 0.6)
## ========================================================
##            REGRESSION MODELS 5-minute model
## ========================================================
# function for model summary
getModelSumm <- function(model, coef) {
if(coef) {
#print(model)
print(coeftest(model, vcov = vcovHC(model, type="HC1"))) # robust se
}
print(paste("R^2: ", summary(model)$r.squared))
hist(model$residuals, breaks = 50)
print(paste("AIC: ",AIC(model)))
print(paste("BIC: ", BIC(model)))
}
# Cross-products
grpOverlap = matrix(0, nrow(broadNet))
for (i in 1:nrow(broadNet)){
if (dummiesDirectModel$overlapBefore_1[i] == 1){
grpOverlap[i] = broadNet$gross_rating_point[i - 1] + broadNet$gross_rating_point[i]
}
else if (dummiesDirectModel$overlapAfter_1[i] == 1){
grpOverlap[i] = broadNet$gross_rating_point[i] + broadNet$gross_rating_point[i + 1]
}
else{
grpOverlap[i] = broadNet$gross_rating_point[i]
}
}
GRP30 = broadNet$gross_rating_point * dummiesDirectModel$length_of_spot_30
GRP3010 = broadNet$gross_rating_point * dummiesDirectModel$`length_of_spot_30 + 10`
GRPbegin = broadNet$gross_rating_point * dummiesDirectModel$position_in_break_3option_begin
GRPend = broadNet$gross_rating_point * dummiesDirectModel$position_in_break_3option_end
# Baseline models
baselineModel = lm(postVisitorsWeb ~ preVisitorsWeb + factor(hours) + weekdays, data = broadNet)
getModelSumm(baselineModel, T)
# Full model
fullModel = lm(broadNet$postVisitorsWeb ~ broadNet$preVisitorsWeb + factor(broadNet$hours) + broadNet$gross_rating_point + ., data = dummiesDirectModel)
getModelSumm(fullModel, T)
# TRY OUT
datas = dummiesDirectModel
for (i in 1:ncol(datas)){
datas[, i] = broadNet$gross_rating_point * dummiesDirectModel[, i]
}
fullModel2 = lm(broadNet$postVisitorsWeb ~ broadNet$preVisitorsWeb + factor(broadNet$hours) + ., data = datas)
getModelSumm(fullModel2, T)
# Baseline models -- BE WEB
baselineModel = lm(postVisitorsWeb ~ preVisitorsWeb + factor(hours) + weekdays, data = broadBel)
getModelSumm(baselineModel, T)
# Full model -- BE WEB
fullModel = lm(broadBel$postVisitorsWeb ~ broadBel$preVisitorsWeb + factor(broadBel$hours) + broadBel$gross_rating_point +., data = dummiesDirectModelBel)
getModelSumm(fullModel, T)
## ========================================================
##                    Overfitting Test
## ========================================================
#Calculate Mean Squared Prediction Error
preVisitorsWeb = broadNet$preVisitorsWeb
postVisitorsWeb = broadNet$postVisitorsWeb
hours = broadNet$hours
weekdays = broadNet$weekdays
grossRating = broadNet$gross_rating_point
broadDumm = cbind(postVisitorsWeb, preVisitorsWeb, hours, weekdays, grossRating, dummiesDirectModel)
#Calculate Mean Squared Prediction Error
preVisitorsWeb = broadBel$preVisitorsApp
postVisitorsWeb = broadBel$postVisitorsApp
hours = broadBel$hours
weekdays = broadBel$weekdays
grossRating = broadBel$gross_rating_point
broadDumm = cbind(postVisitorsWeb, preVisitorsWeb, hours, weekdays, grossRating, dummiesDirectModel)
set.seed(21)
folds = 100
avBaseTrainError = vector(length = folds)
avBaseTestError = vector(length = folds)
avFullTrainError = vector(length = folds)
avFullTestError = vector(length = folds)
for (i in 1:folds){
sampleSplit = sample.split(broadBel$postVisitorsApp, SplitRatio = 0.8)
broadTrain = broadDumm[sampleSplit == TRUE,]
broadTest = broadDumm[sampleSplit == FALSE,]
# Baseline model
baselineModel = lm(postVisitorsWeb ~ preVisitorsWeb + hours + weekdays_dinsdag + weekdays_donderdag + weekdays_maandag +weekdays_vrijdag + weekdays_woensdag + weekdays_zondag, data = broadTrain)
# getModelSumm(baselineModel, TRUE)
avBaseTrainError[i] = rmse(broadTrain$postVisitorsWeb, predict(baselineModel, broadTrain))
avBaseTestError[i] = rmse(broadTest$postVisitorsWeb, predict(baselineModel, broadTest))
# Treatment effects only models
# treatmentOnlyModel = lm(postVisitors ~ .-preVisitors, data = broadTrain)
# rmse(broadTest$postVisitors, predict(treatmentOnlyModel, broadTest))
# Full treatment model
fullModel = lm(postVisitorsWeb ~ preVisitorsWeb + ., data = broadTrain)
# getModelSumm(fullModel, FALSE)
avFullTrainError[i] = rmse(broadTrain$postVisitorsWeb, predict(fullModel, broadTrain))
avFullTestError[i] = rmse(broadTest$postVisitorsWeb, predict(fullModel, broadTest))
}
mean(avBaseTrainError)
mean(avBaseTestError)
mean(avFullTrainError)
mean(avFullTestError)
## ================================================
##                Netherlands App regression
## ================================================
# Baseline models
baselineModel = lm(postVisitorsApp ~ preVisitorsApp + factor(hours) + weekdays, data = broadNet)
getModelSumm(baselineModel, TRUE)
# Full model
fullModel = lm(broadNet$postVisitorsApp ~ broadNet$preVisitorsApp + factor(broadNet$hours) + broadNet$gross_rating_point + ., data = dummiesDirectModel)
#save(fullModel, file = "my-fitted-boost.rda")
getModelSumm(fullModel, T)
# Baseline models -- BE APP
baselineModel = lm(postVisitorsApp ~ preVisitorsApp + factor(hours) + weekdays, data = broadBel)
getModelSumm(baselineModel, TRUE)
# Full model -- BE APP
fullModel = lm(broadBel$postVisitorsApp ~ broadBel$preVisitorsApp + factor(broadBel$hours) + broadBel$gross_rating_point + ., data = dummiesDirectModelBel)
getModelSumm(fullModel, T)
## ========================================================
##                    Overfitting Test App
## ========================================================
preVisitorsApp = broadNet$preVisitorsApp
postVisitorsApp = broadNet$postVisitorsApp
hours = broadNet$hours
grossRating = broadNet$gross_rating_point
broadDumm = cbind(postVisitorsApp, preVisitorsApp, hours, grossRating, dummiesDirectModel)
set.seed(21)
folds = 100
avBaseTrainError = vector(length = folds)
avBaseTestError = vector(length = folds)
avFullTrainError = vector(length = folds)
avFullTestError = vector(length = folds)
for (i in 1:folds){
sampleSplit = sample.split(broadNet$postVisitorsWeb, SplitRatio = 0.8)
broadTrain = broadDumm[sampleSplit == TRUE,]
broadTest = broadDumm[sampleSplit == FALSE,]
# Baseline model
baselineModel = lm(postVisitorsApp ~ preVisitorsApp + hours + weekdays_dinsdag + weekdays_donderdag + weekdays_maandag +weekdays_vrijdag + weekdays_woensdag + weekdays_zondag, data = broadTrain)
#getModelSumm(baselineModel, TRUE)
avBaseTrainError[i] = rmse(broadTrain$postVisitorsApp, predict(baselineModel, broadTrain))
avBaseTestError[i] = rmse(broadTest$postVisitorsApp, predict(baselineModel, broadTest))
# Treatment effects only models
#treatmentOnlyModel = lm(postVisitors ~ .-preVisitors, data = broadTrain)
#rmse(broadTest$postVisitors, predict(treatmentOnlyModel, broadTest))
# Full treatment model
fullModel = lm(postVisitorsApp ~ preVisitorsApp + ., data = broadTrain)
#getModelSumm(fullModel, FALSE)
avFullTrainError[i] = rmse(broadTrain$postVisitorsApp, predict(fullModel, broadTrain))
avFullTestError[i] = rmse(broadTest$postVisitorsApp, predict(fullModel, broadTest))
}
mean(avBaseTrainError)
mean(avBaseTestError)
mean(avFullTrainError)
mean(avFullTestError)
# Full model
fullModel = lm(broadNet$postVisitorsWeb ~ broadNet$preVisitorsWeb + factor(broadNet$hours) + broadNet$gross_rating_point + ., data = dummiesDirectModel)
getModelSumm(fullModel, T)
save(fullModel, file = "fullModelSaved.rda")
getwd()
load(fullModelSaved.rda)
getwd()
load("fullModelSaved.rda")
fullModel = load(fullModelSaved.rda)
fullModel = load("fullModelSaved.rda")
runApp('RShinyErik.R')
fullModel = load("fullModelSaved.rda")
fullModel
load("fullModelSaved.rda")
fullModel
runApp('RShinyErik.R')
runApp('RShinyErik.R')
class(fullModel$coefficients)
fullCoef = as.data.frame(fullModel$coefficients)
channels = unique(broadNet$channel)
runApp('RShinyErik.R')
dim(fullModel$coefficients)
length(fullModel$coefficients)
runApp('RShinyErik.R')
runApp('RShinyErik.R')
runApp('RShinyErik.R')
runApp('RShinyErik.R')
runApp('RShinyErik.R')
runApp('RShinyErik.R')
runApp('RShinyErik.R')
runApp('RShinyErik.R')
runApp('RShinyErik.R')
runApp('RShinyErik.R')
runApp('RShinyErik.R')
runApp('RShinyErik.R')
runApp('RShinyErik.R')
runApp('RShinyErik.R')
runApp('RShinyErik.R')
names(fullModel$coefficients)
runApp('RShinyErik.R')
runApp('RShinyErik.R')
runApp('RShinyErik.R')
runApp('RShinyErik.R')
runApp('RShinyErik.R')
