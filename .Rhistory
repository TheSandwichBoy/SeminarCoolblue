# We will continue with Web-NL
broadNet = subset(broad, country == "Netherlands")
broadBel = subset(broad, country == "Belgium")
broad$overlapBefore = overlapDummy(5)$Before
broad$overlapAfter = overlapDummy(5)$After
View(broadNet)
View(broadNet)
# Overlap dummy
broadNet = subset(broad, country == 'Netherlands')
broadBel = subset(broad, country == 'Belgium')
intervalSize = 5
#intervalSize = 20
iNet = 0
iBel = 0
broad = broad[order(broad$date_time),]
broadNet = broadNet[order(broadNet$date_time),]
broadBel = broadBel[order(broadBel$date_time),]
broad$overlapBefore = 0
broad$overlapAfter = 0
for (i in 1:nrow(broad)){
# en wat bij middernacht?
if (broad$country[i] == 'Netherlands'){
iNet = iNet + 1
#print(i)
datetime = broad$date_time[i]
datetime = as.POSIXct(datetime)
timeEarlier = datetime - intervalSize * 60
timeLater = datetime + intervalSize * 60
# Interval before
if (iNet > 1){ # exclude first dutch commercial
if (timeEarlier <= broadNet$date_time[iNet - 1] && broadNet$date_time[iNet - 1] <= datetime){
broad$overlapBefore[i] = 1
}
}
# Interval after
if (iNet < nrow(broadNet)){ # exclude last dutch commercial
if (datetime <= broadNet$date_time[iNet + 1] && broadNet$date_time[iNet + 1] <= timeLater){
broad$overlapAfter[i] = 1
}
}
}
if (broad$country[i] == 'Belgium'){
iBel = iBel + 1
#print(i)
datetime = broad$date_time[i]
datetime = as.POSIXct(datetime)
timeEarlier = datetime - intervalSize * 60
timeLater = datetime + intervalSize * 60
# Interval before
if (iBel > 1){
if (timeEarlier <= broadBel$date_time[iBel - 1] && broadBel$date_time[iBel - 1] <= datetime){
broad$overlapBefore[i] = 1
}
}
# Interval after
if (iBel < nrow(broadBel)){
if (datetime <= broadBel$date_time[iBel + 1] && broadBel$date_time[iBel + 1] <= timeLater){
broad$overlapAfter[i] = 1
}
}
}
}
broad = broad[order(as.numeric(row.names(broad))),]
broadNet = broadNet[order(as.numeric(row.names(broadNet))),]
broadBel = broadBel[order(as.numeric(row.names(broadBel))),]
broadNet = subset(broad, country == 'Netherlands')
broadBel = subset(broad, country == 'Belgium')
# We will continue with Web-NL
broadNet = subset(broad, country == "Netherlands")
broadBel = subset(broad, country == "Belgium")
# dummiesDirectModel Netherlands contains the treatment variables
variablesDirectModel = c("product_category", "channel", "length_of_spot", "position_in_break_3option", "weekdays", "overlapBefore", "overlapAfter")
dummiesDirectModelPre = dummy_cols(.data = broadNet, select_columns = variablesDirectModel, remove_most_frequent_dummy = T)
dummiesDirectModel = dummiesDirectModelPre[,((ncol(broadNet)+1):ncol(dummiesDirectModelPre))]
dummiesDirectModel = as.data.frame(dummiesDirectModel)
rm(dummiesDirectModelPre); rm(variablesDirectModel)
# function for model summary
getModelSumm <- function(model, coef) {
if(coef) {
#print(model)
print(coeftest(model, vcov = vcovHC(model, type="HC1"))) # robust se
}
print(paste("R^2: ", summary(model)$r.squared))
hist(model$residuals, breaks = 50)
print(paste("AIC: ",AIC(model)))
print(paste("BIC: ", BIC(model)))
}
# Cross-products
grpOverlapBefore = broadNet$gross_rating_point*dummiesDirectModel$overlapBefore_1
grpOverlapAfter = broadNet$gross_rating_point*dummiesDirectModel$overlapAfter_1
# Baseline models
baselineModel = lm(postVisitorsWeb ~ preVisitorsWeb + factor(hours) + weekdays, data = broadNet)
getModelSumm(baselineModel, T)
# Full model
fullModel = lm(broadNet$postVisitorsWeb ~ broadNet$preVisitorsWeb + factor(broadNet$hours) + broadNet$gross_rating_point + ., data = dummiesDirectModel)
getModelSumm(fullModel, T)
# Cross-products
grpOverlapBefore = broadNet$gross_rating_point*dummiesDirectModel$overlapBefore_1
grpOverlapAfter = broadNet$gross_rating_point*dummiesDirectModel$overlapAfter_1
# Full model adjusted
fullModel = lm(broadNet$postVisitorsWeb ~ broadNet$preVisitorsWeb + grpOverlapBefore + grpOverlapAfter + factor(broadNet$hours) + broadNet$gross_rating_point + ., data = dummiesDirectModel)
getModelSumm(fullModel, T)
View(dummiesDirectModel)
# Full model
fullModel = lm(broadNet$postVisitorsWeb ~ broadNet$preVisitorsWeb + factor(broadNet$hours) + broadNet$gross_rating_point + ., data = dummiesDirectModel)
getModelSumm(fullModel, T)
# Full model multiplicative
fullModel = lm(broadNet$postVisitorsWeb ~ broadNet$gross_rating_point * (broadNet$preVisitorsWeb + factor(broadNet$hours) + .), data = dummiesDirectModel)
getModelSumm(fullModel, T)
# Full model adjusted
fullModel = lm(broadNet$postVisitorsWeb ~ broadNet$preVisitorsWeb + grpOverlapBefore + grpOverlapAfter + factor(broadNet$hours) + broadNet$gross_rating_point + ., data = dummiesDirectModel)
getModelSumm(fullModel, T)
# Full model multiplicative
fullModel = lm(broadNet$postVisitorsWeb ~ broadNet$gross_rating_point * (broadNet$preVisitorsWeb + factor(broadNet$hours) + . - overlapBefore_1 - overlapAfter_1), data = dummiesDirectModel)
getModelSumm(fullModel, T)
# Full model adjusted
fullModel = lm(broadNet$postVisitorsWeb ~ broadNet$preVisitorsWeb + grpOverlapBefore + grpOverlapAfter + factor(broadNet$hours) + broadNet$gross_rating_point + .  - overlapBefore_1 - overlapAfter_1, data = dummiesDirectModel)
getModelSumm(fullModel, T)
View(grpOverlapBefore)
# Cross-products
grpOverlapBefore = matrix(0, nrow(broadNet))
for (i in 1:nrow(broadNet)){
if (dummiesDirectModel$overlapBefore_1 == 1){
grpOverlapBefore = broadNet$gross_rating_point[i - 1] + broadNet$gross_rating_point[i]
}
else{
grpOverlapBefore = broadNet$gross_rating_point[i]
}
}
grpOverlapAfter = matrix(0, nrow(broadNet))
for (i in 1:nrow(broadNet)){
if (dummiesDirectModel$overlapBefore_1 == 1){
grpOverlapAfter = broadNet$gross_rating_point[i] + broadNet$gross_rating_point[i + 1]
}
else{
grpOverlapAfter = broadNet$gross_rating_point[i]
}
}
warnings()
i
# Cross-products
grpOverlapBefore = matrix(0, nrow(broadNet))
dummiesDirectModel$overlapBefore_1 == 1
dummiesDirectModel$overlapBefore_1[i] == 1
# Cross-products
grpOverlapBefore = matrix(0, nrow(broadNet))
for (i in 1:nrow(broadNet)){
if (dummiesDirectModel$overlapBefore_1[i] == 1){
grpOverlapBefore = broadNet$gross_rating_point[i - 1] + broadNet$gross_rating_point[i]
}
else{
grpOverlapBefore = broadNet$gross_rating_point[i]
}
}
grpOverlapAfter = matrix(0, nrow(broadNet))
for (i in 1:nrow(broadNet)){
if (dummiesDirectModel$overlapAfter_1[i] == 1){
grpOverlapAfter = broadNet$gross_rating_point[i] + broadNet$gross_rating_point[i + 1]
}
else{
grpOverlapAfter = broadNet$gross_rating_point[i]
}
}
# Full model adjusted
fullModel = lm(broadNet$postVisitorsWeb ~ broadNet$preVisitorsWeb + grpOverlapBefore + grpOverlapAfter + factor(broadNet$hours) + broadNet$gross_rating_point + .  - overlapBefore_1 - overlapAfter_1, data = dummiesDirectModel)
getModelSumm(fullModel, T)
# Full model adjusted
fullModel = lm(broadNet$postVisitorsWeb ~ broadNet$preVisitorsWeb + grpOverlapBefore + grpOverlapAfter + factor(broadNet$hours) + broadNet$gross_rating_point + .  - overlapBefore_1 - overlapAfter_1, data = dummiesDirectModel)
nrow(grpO])
nrow(grpOverlapBefore)
NROW(grpOverlapBefore)
# Cross-products
grpOverlapBefore = matrix(0, nrow(broadNet))
for (i in 1:nrow(broadNet)){
if (dummiesDirectModel$overlapBefore_1[i] == 1){
grpOverlapBefore[i] = broadNet$gross_rating_point[i - 1] + broadNet$gross_rating_point[i]
}
else{
grpOverlapBefore[i] = broadNet$gross_rating_point[i]
}
}
grpOverlapAfter = matrix(0, nrow(broadNet))
for (i in 1:nrow(broadNet)){
if (dummiesDirectModel$overlapAfter_1[i] == 1){
grpOverlapAfter[i] = broadNet$gross_rating_point[i] + broadNet$gross_rating_point[i + 1]
}
else{
grpOverlapAfter[i] = broadNet$gross_rating_point[i]
}
}
# Full model adjusted
fullModel = lm(broadNet$postVisitorsWeb ~ broadNet$preVisitorsWeb + grpOverlapBefore + grpOverlapAfter + factor(broadNet$hours) + broadNet$gross_rating_point + .  - overlapBefore_1 - overlapAfter_1, data = dummiesDirectModel)
getModelSumm(fullModel, T)
# Full model adjusted
fullModel = lm(broadNet$postVisitorsWeb ~ broadNet$preVisitorsWeb + grpOverlapBefore + grpOverlapAfter + factor(broadNet$hours) +  .  - overlapBefore_1 - overlapAfter_1, data = dummiesDirectModel)
getModelSumm(fullModel, T)
# Full model
fullModel = lm(broadNet$postVisitorsWeb ~ broadNet$preVisitorsWeb + factor(broadNet$hours) + broadNet$gross_rating_point + ., data = dummiesDirectModel)
getModelSumm(fullModel, T)
# Full model adjusted
fullModel = lm(broadNet$postVisitorsWeb ~ broadNet$preVisitorsWeb + grpOverlapBefore + grpOverlapAfter + factor(broadNet$hours) +  .  - overlapBefore_1 - overlapAfter_1, data = dummiesDirectModel)
getModelSumm(fullModel, T)
View(grpOverlapBefore)
View(cbind(grpOverlapBefore, grpOverlapAfter))
# Cross-products
grpOverlap = matrix(0, nrow(broadNet))
for (i in 1:nrow(broadNet)){
if (dummiesDirectModel$overlapBefore_1[i] == 1){
grpOverlap[i] = broadNet$gross_rating_point[i - 1] + broadNet$gross_rating_point[i]
}
else if (dummiesDirectModel$overlapAfter_1[i] == 1){
grpOverlap[i] = broadNet$gross_rating_point[i] + broadNet$gross_rating_point[i + 1]
}
else{
grpOverlap[i] = broadNet$gross_rating_point[i]
}
}
# Full model adjusted
fullModel = lm(broadNet$postVisitorsWeb ~ broadNet$preVisitorsWeb + grpOverlapBefore + grpOverlapAfter + factor(broadNet$hours) +  .  - overlapBefore_1 - overlapAfter_1, data = dummiesDirectModel)
getModelSumm(fullModel, T)
# Full model adjusted
fullModel = lm(broadNet$postVisitorsWeb ~ broadNet$preVisitorsWeb + grpOverlap + factor(broadNet$hours) +  .  - overlapBefore_1 - overlapAfter_1, data = dummiesDirectModel)
getModelSumm(fullModel, T)
# Full model adjusted
fullModel = lm(broadNet$postVisitorsWeb ~ broadNet$preVisitorsWeb + broadNet$gross_rating_point + factor(broadNet$hours) +  .  - overlapBefore_1 - overlapAfter_1, data = dummiesDirectModel)
getModelSumm(fullModel, T)
# Full model adjusted
fullModel = lm(broadNet$postVisitorsWeb ~ broadNet$preVisitorsWeb + factor(broadNet$hours) + broadNet$gross_rating_point + ., data = dummiesDirectModel)
getModelSumm(fullModel, T)
# Full model adjusted
fullModel = lm(broadNet$postVisitorsWeb ~ broadNet$preVisitorsWeb + factor(broadNet$hours) + grpOverlap + ., data = dummiesDirectModel)
getModelSumm(fullModel, T)
# Full model
fullModel = lm(broadNet$postVisitorsWeb ~ broadNet$preVisitorsWeb + factor(broadNet$hours) + broadNet$gross_rating_point + ., data = dummiesDirectModel)
getModelSumm(fullModel, T)
# Full model multiplicative
fullModel = lm(broadNet$postVisitorsWeb ~ grpOverlap * (broadNet$preVisitorsWeb + factor(broadNet$hours) + .), data = dummiesDirectModel)
getModelSumm(fullModel, T)
# Full model multiplicative
fullModel = lm(broadNet$postVisitorsWeb ~ broadNet$preVisitorsWeb + factor(broadNet$hours) + broadNet$gross_rating_point + ., data = dummiesDirectModel)
getModelSumm(fullModel, T)
GRP30 = broadNet$gross_rating_point * dummiesDirectModel$length_of_spot_30
4GRP3010 = broadNet$gross_rating_point * dummiesDirectModel$`length_of_spot_30 + 10`
GRP3010 = broadNet$gross_rating_point * dummiesDirectModel$`length_of_spot_30 + 10`
GRPbegin = broadNet$gross_rating_point * dummiesDirectModel$position_in_break_3option_begin
GRPend = broadNet$gross_rating_point * dummiesDirectModel$position_in_break_3option_end
# Full model multiplicative
fullModel = lm(broadNet$postVisitorsWeb ~ broadNet$preVisitorsWeb + factor(broadNet$hours) + GRP30 + GRP3010 + GRPbegin + GRPend + broadNet$gross_rating_point + ., data = dummiesDirectModel)
getModelSumm(fullModel, T)
# Full model adjusted
fullModel = lm(broadNet$postVisitorsWeb ~ broadNet$preVisitorsWeb + factor(broadNet$hours) + grpOverlap + . - length_of_spot_30 - `length_of_spot_30 + 10` - position_in_break_3option_begin - position_in_break_3option_end, data = dummiesDirectModel)
getModelSumm(fullModel, T)
# Full model adjusted
fullModel = lm(broadNet$postVisitorsWeb ~ broadNet$preVisitorsWeb + factor(broadNet$hours) + grpOverlap + ., data = dummiesDirectModel)
getModelSumm(fullModel, T)
# Full model multiplicative
fullModel = lm(broadNet$postVisitorsWeb ~ broadNet$preVisitorsWeb + factor(broadNet$hours) + GRP30 + GRP3010 + GRPbegin + GRPend + broadNet$gross_rating_point + ., data = dummiesDirectModel)
getModelSumm(fullModel, T)
# Full model multiplicative
fullModel = lm(broadNet$postVisitorsWeb ~ broadNet$preVisitorsWeb + factor(broadNet$hours) + GRP30 + GRP3010 + GRPbegin + GRPend + grpOverlap + ., data = dummiesDirectModel)
getModelSumm(fullModel, T)
# Full model multiplicative
fullModel = lm(broadNet$postVisitorsWeb ~ broadNet$preVisitorsWeb + factor(broadNet$hours) + GRP30 + GRP3010 + GRPbegin + GRPend + grpOverlap + . - overlapBefore_1 - overlapAfter_1, data = dummiesDirectModel)
getModelSumm(fullModel, T)
# Full model multiplicative
fullModel = lm(broadNet$postVisitorsWeb ~ broadNet$preVisitorsWeb + broadNet$gross_rating_point + factor(broadNet$hours) + GRP30 + GRP3010 + GRPbegin + GRPend + grpOverlap + . - overlapBefore_1 - overlapAfter_1, data = dummiesDirectModel)
getModelSumm(fullModel, T)
# Full model multiplicative
fullModel = lm(broadNet$postVisitorsWeb ~ broadNet$preVisitorsWeb + broadNet$gross_rating_point + factor(broadNet$hours) + GRP30 + GRP3010 + GRPbegin + GRPend + . - overlapBefore_1 - overlapAfter_1, data = dummiesDirectModel)
getModelSumm(fullModel, T)
# Full model multiplicative
fullModel = lm(broadNet$postVisitorsWeb ~ broadNet$preVisitorsWeb + broadNet$gross_rating_point + factor(broadNet$hours) + GRP30 + GRP3010 + GRPbegin + GRPend + ., data = dummiesDirectModel)
getModelSumm(fullModel, T)
View(broadNet[broadNet$channel==SBS6])
View(broadNet[broadNet$channel=='SBS6'])
View(broadNet[broadNet$channel=='SBS 6'])
View(broadNet[broadNet$channel=='SBS 6',])
sum(broadNet[broadNet$program_before == 'overige non fictie'])
sum(broadNet[broadNet$program_before == 'overige non fictie',])
sum(broadNet[broadNet$program_before == 'overige non fictie'],)
sum(broadNet[broadNet$program_before == 'overige non fictie'])
sum(broadNet[broadNet$program_category_before == 'overige non fictie'])
sum(broadNet[broadNet$program_category_before == 'overige non fictie',])
sum(broadNet[broadNet$program_category_before == 'overige non fictie'])
sum(broadNet[broadNet$program_category_before == 'overige non fictie',])
sum(broadNet[broadNet$program_category_before == 'overige non fictie'])
broadNet[broadNet$program_category_before == 'overige non fictie']
broadNet[broadNet$program_category_before == 'overige non fictie',]
nrow(broadNet[broadNet$program_category_before == 'overige non fictie',])
nrow(broadNet[broadNet$program_category_before == 'overige non fictie',])+nrow(broadNet[broadNet$program_category_after == 'overige non fictie',])
nrow(broadNet[broadNet$program_category_before == 'overig amusement',])+nrow(broadNet[broadNet$program_category_after == 'overig amusement',])
nrow(broadNet[broadNet$program_category_before == 'overige non fictie',])+nrow(broadNet[broadNet$program_category_after == 'overige non fictie',])
nrow(broadNet[broadNet$channel == 'SBS6' & broadNet$program_category_before == 'overige non fictie',])+nrow(broadNet[broadNet$program_category_after == 'overige non fictie',])
nrow(broadNet[broadNet$channel == 'SBS6' & broadNet$program_category_before == 'overige non fictie',])+nrow(broadNet[broadNet$channel == 'SBS 6' & broadNet$program_category_after == 'overige non fictie',])
nrow(broadNet[broadNet$channel == 'SBS6' & broadNet$program_category_before == 'overige non fictie',])+nrow(broadNet[broadNet$channel == 'SBS6' & broadNet$program_category_after == 'overige non fictie',])
nrow(broadNet[broadNet$channel == 'SBS 6' & broadNet$program_category_before == 'overige non fictie',])+nrow(broadNet[broadNet$channel == 'SBS 6' & broadNet$program_category_after == 'overige non fictie',])
nrow(broadNet[broadNet$channel == 'SBS 6' & broadNet$program_category_before == 'overig amusement',])+nrow(broadNet[broadNet$channel == 'SBS 6' & broadNet$program_category_after == 'overig amusement',])
View(broadNet[broadNet$channel == 'Viceland'])
View(broadNet[broadNet$channel == 'Viceland',])
View(broadNet[broadNet$channel == 'Kanaal Z',])
View(broadBel[broadNet$channel == 'Kanaal Z',])
View(broadBel[broadBel$channel == 'Kanaal Z',])
broadBel$channel == 'Kanaal Z',]
broadBel$channel == 'Kanaal Z']
broadBel$channel == 'Kanaal Z'
sum(broadBel$channel == 'Kanaal Z')
unique(broadBel$channel)
View(broadBel[broadBel$channel == 'KANAAL Z',])
sum(broadBel$channel == 'KANAAL Z')
View(broadBel[broadBel$channel == 'KANAAL Z (NL)',])
plot(visitorsSumDay$visitsWebBel, type = 'l', main = "Website-Belgium visits on 2019-05-01",
xlab ='Time (seconds)', ylab = 'Visit density')
## Plot of traffic (visit density) an arbitrary day (2019-05-01) [Erik]
visitorsSumDay = subset(visitorsSum, date == "2019-05-01")
par(mfrow=c(2,2))
plot(visitorsSumDay$visitsWebNet, type = 'l', main = "Website-Netherlands visits on 2019-05-01",
xaxt='n', yaxt = 'n', ann=FALSE)
# Including "indicators" for commercials (65 only Dutch on 2019-05-01)
broadDay <- subset(broad, date == "2019-05-01")
broadDay <- broadDay[order(broadDay$time),]
for (i in 1:nrow(broadDay)){
abline(v = as.numeric(broadDay$time_min[i]), col = 'grey')
}
par(new=TRUE)
plot(visitorsSumDay$visitsWebNet, type = 'l', main = "Website-Netherlands visits on 2019-05-01",
xlab ='Time (seconds)', ylab = 'Visit density')
plot(visitorsSumDay$visitsAppNet, type = 'l', main = "App-Netherlands visits on 2019-05-01",
xlab ='Time (seconds)', ylab = 'Visit density')
plot(visitorsSumDay$visitsWebBel, type = 'l', main = "Website-Belgium visits on 2019-05-01",
xlab ='Time (seconds)', ylab = 'Visit density')
plot(visitorsSumDay$visitsAppBel, type = 'l', main = "App-Belgium visits on 2019-05-01",
xlab ='Time (seconds)', ylab = 'Visit density')
rm(visitorsSumDay); rm(broadDay)
## Plots of visit density over 6 months (2x2) [Erik]
par(mfrow=c(2,2))
# plot Netherlands -- Website
plot(as.numeric(daysVisitorsSum[,2])/as.numeric(max(daysVisitorsSum[,2])), type = "l", xaxt='n',  yaxt='n', ann=FALSE)
for (i in 1:length(uniqueDatesNet)){
abline(v = yday(uniqueDatesNet[i]), col = '#DCDCDC', lwd = 3) # ads
}
par(new=TRUE)
plot(as.numeric(daysVisitorsSum[,2])/as.numeric(max(daysVisitorsSum[,2])), las=1, type = "l", xaxt='n', xlab = "Time (months)",
ylab="", main = "Website traffic Netherlands (2019)")
axis(side =1, at=c(0, 31, 59, 90, 120, 151, 181), labels = NA)
axis(side =1, at=c(ceiling(0+(31-0)/2), ceiling(31+(59-31)/2), ceiling(59+(90-59)/2),
(90+(120-90)/2), ceiling(120+(151-120)/2), ceiling(151+(181-151)/2)),
labels= c('Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun'), tick = FALSE)
# plot Netherlands -- App
plot(as.numeric(daysVisitorsSum[,3])/as.numeric(max(daysVisitorsSum[,2])), type = "l", xaxt='n',  yaxt='n', ann=FALSE)
for (i in 1:length(uniqueDatesNet)){
abline(v = yday(uniqueDatesNet[i]), col = '#DCDCDC', lwd = 3) # ads
}
par(new=TRUE)
plot(as.numeric(daysVisitorsSum[,3])/as.numeric(max(daysVisitorsSum[,2])), las=1, type = "l", xaxt='n', xlab = "Time (months)",
ylab = '', main = "App traffic Netherlands (2019)")
axis(side =1, at=c(0, 31, 59, 90, 120, 151, 181), labels = NA)
axis(side =1, at=c(ceiling(0+(31-0)/2), ceiling(31+(59-31)/2), ceiling(59+(90-59)/2),
(90+(120-90)/2), ceiling(120+(151-120)/2), ceiling(151+(181-151)/2)),
labels= c('Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun'), tick = FALSE)
# plot Belgium -- Website
plot(as.numeric(daysVisitorsSum[,4])/as.numeric(max(daysVisitorsSum[,4])), type = "l", xaxt='n',  yaxt='n', ann=FALSE)
for (i in 1:length(uniqueDatesNet)){
abline(v = yday(uniqueDatesBel[i]), col = '#DCDCDC', lwd = 3) # ads
}
par(new=TRUE)
plot(as.numeric(daysVisitorsSum[,4])/as.numeric(max(daysVisitorsSum[,4])), las=1, type = "l", xaxt='n', xlab = "Time (months)",
ylab = '', main = "Website traffic Belgium (2019)")
axis(side =1, at=c(0, 31, 59, 90, 120, 151, 181), labels = NA)
axis(side =1, at=c(ceiling(0+(31-0)/2), ceiling(31+(59-31)/2), ceiling(59+(90-59)/2),
(90+(120-90)/2), ceiling(120+(151-120)/2), ceiling(151+(181-151)/2)),
labels= c('Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun'), tick = FALSE)
# plot Belgium -- Website
plot(as.numeric(daysVisitorsSum[,4])/as.numeric(max(daysVisitorsSum[,4])), type = "l", xaxt='n',  yaxt='n', ann=F)
plot(as.numeric(daysVisitorsSum[1:59, 4])/as.numeric(max(daysVisitorsSum[1:59, 4])), type = "l", xaxt='n',  yaxt='n', ann=F)
# plot Belgium -- Website
plot(as.numeric(daysVisitorsSum[,4])/as.numeric(max(daysVisitorsSum[,4])), type = "l", xaxt='n',  yaxt='n', ann=F)
plot(as.numeric(daysVisitorsSum[1:59, 4])/as.numeric(max(daysVisitorsSum[1:59, 4])), type = "l", xaxt='n',  yaxt='n', ann=F)
axis(side =1, at=c(ceiling(0+(31-0)/2), ceiling(31+(59-31)/2), ceiling(59+(90-59)/2),
(90+(120-90)/2), ceiling(120+(151-120)/2), ceiling(151+(181-151)/2)),
labels= c('Jan', 'Feb'), tick = F)
axis(side =1, at=c(0, 31, 59), labels = NA)
axis(side =1, at=c(ceiling(0+(31-0)/2), ceiling(31+(59-31)/2), ceiling(59+(90-59)/2),
(90+(120-90)/2), ceiling(120+(151-120)/2), ceiling(151+(181-151)/2)),
labels= c('Jan', 'Feb'), tick = F)
axis(side =1, at=c(ceiling(0+(31-0)/2), ceiling(31+(59-31)/2)),
labels= c('Jan', 'Feb'), tick = F)
plot(as.numeric(daysVisitorsSum[1:59, 4])/as.numeric(max(daysVisitorsSum[1:59, 4])), type = "l", xaxt='n',  yaxt='n', ann=F)
axis(side =1, at=c(0, 31, 59), labels = NA)
axis(side =1, at=c(ceiling(0+(31-0)/2), ceiling(31+(59-31)/2)),
labels= c('Jan', 'Feb'), tick = F)
plot(as.numeric(daysVisitorsSum[1:90, 4])/as.numeric(max(daysVisitorsSum[1:59, 4])), type = "l", xaxt='n',  yaxt='n', ann=F)
axis(side =1, at=c(0, 31, 59, 90), labels = NA)
axis(side =1, at=c(ceiling(0+(31-0)/2), ceiling(31+(59-31)/2), ceiling(59+(90-59)/2)),
labels= c('Jan', 'Feb'), tick = F)
plot(as.numeric(daysVisitorsSum[1:90, 4])/as.numeric(max(daysVisitorsSum[1:90, 4])), type = "l", xaxt='n',  yaxt='n', ann=F)
axis(side =1, at=c(0, 31, 59, 90), labels = NA)
axis(side =1, at=c(ceiling(0+(31-0)/2), ceiling(31+(59-31)/2), ceiling(59+(90-59)/2)),
labels= c('Jan', 'Feb'), tick = F)
plot(as.numeric(daysVisitorsSum[1:90, 4])/as.numeric(max(daysVisitorsSum[1:90, 4])), type = "l", xaxt='n',  yaxt='n', ann=F)
axis(side = 1, at=c(0, 31, 59, 90), labels = NA)
axis(side = 1, at=c(ceiling(0+(31-0)/2), ceiling(31+(59-31)/2), ceiling(59+(90-59)/2)),
labels= c('Jan', 'Feb', 'March'), tick = F)
daysVisitorsSum[1:90, 4])
daysVisitorsSum[1:90, 4]
for (i in 2:90){
if (daysVisitorsSum[i, 4] < daysVisitorsSum[(i - 1), 4]){
higherLower[i] = -1
}
else{
higherLower[i] = 1
}
}
higherLower = matrix(NA, 90)
higherLower = matrix(NA, 90)
for (i in 2:90){
if (daysVisitorsSum[i, 4] < daysVisitorsSum[(i - 1), 4]){
higherLower[i] = -1
}
else{
higherLower[i] = 1
}
}
plot(higherLower, type = "l")
sum(higherLower)
mean(higherLower, na.rm = T)
mean(higherLower, na.rm = F)
mean(higherLower, na.rm = T)
sum(higherLower == -1)
sum(higherLower == -1, na.rm = T)
sum(higherLower == 1, na.rm = T)
90 - 32
higherLower = matrix(NA, 90)
for (i in 32:90){
if (daysVisitorsSum[i, 4] < daysVisitorsSum[(i - 1), 4]){
higherLower[i] = -1
}
else{
higherLower[i] = 1
}
}
sum(higherLower == -1, na.rm = T)
sum(higherLower == 1, na.rm = T)
mean(dayVisitorsSum[29:41, 4])
mean(daysVisitorsSum[29:41, 4])
daysVisitorsSum[29:41, 4]
daysVisitorsSum[1, 4]
daysVisitorsSum[1, 4]-1
mean(as.numeric(daysVisitorsSum[29:41, 4]))
visWebBel
View(visWebBel)
View(sumVisitIndexBel)
# 211-407
# website
# all
data = zoo(cbind(sumVisitIndexNet, sumVisitIndexBel, interestVectorMed[, 2], interestVectorBCC[, 2]), c(1:181))
set.seed(11)
commercialBegin = "2019-02-11"
commercialEnd = "2019-04-07"
yday_commercialBegin = yday(commercialBegin)
pre.period = c("2019-01-29", "2019-02-10")
yday_pre.period = yday(pre.period)
post.period = c(commercialBegin, commercialEnd)
yday_post.period = yday(post.period)
# See if average of Belgian visits differs much between pre- and post intervention period
preAverage = mean(sumVisitIndexBel[yday_pre.period[1]:yday_pre.period[2]])
postAverage = mean(sumVisitIndexBel[yday_post.period[1]:yday_post.period[2]])
preAverage
postAverage
yday_post.period
42)97
42+97
140/2
# See if average of Belgian visits differs much between pre- and post intervention period
preAverage = mean(sumVisitIndexBel[yday_pre.period[1]:yday_pre.period[2]])
postAverage = mean(sumVisitIndexBel[yday_post.period[1]:70])
preAverage
postAverage
nrow(broadNet)
View(broadNet)
sum(broadNet$position_in_break_3option == 'begin')
sum(broadNet$position_in_break_3option == 'middle')
sum(broadNet$position_in_break_3option == 'end')
sum(broadNet$product_category == 'televisies')
sum(broadNet$product_category == 'laptops')
sum(broadNet$product_category == 'wasmachines')
sum(broadNet$length_of_spot == 30)
sum(broadNet$length_of_spot == '30+10')
sum(broadNet$length_of_spot == '30 + 10')
sum(broadNet$length_of_spot == '30 + 10 + 5')
nrow(broadBel)
sum(broadBel$position_in_break_3option == 'begin')
sum(broadBel$position_in_break_3option == 'middle')
sum(broadBel$position_in_break_3option == 'end')
sum(broadBel$product_category == 'televisies')
sum(broadBel$product_category == 'wasmachines')
sum(broadBel$length_of_spot == 30)
# Full model multiplicative
fullModel = lm(broadNet$postVisitorsWeb/broadNet$gross_rating_point ~ broadNet$preVisitorsWeb + factor(broadNet$hours) +., data = dummiesDirectModel)
getModelSumm(fullModel, T)
broadNet$postVisitorsWeb/broadNet$gross_rating_point
# Full model multiplicative
fullModel = lm((broadNet$postVisitorsWeb/broadNet$gross_rating_point) ~ broadNet$preVisitorsWeb + factor(broadNet$hours) +., data = dummiesDirectModel)
getModelSumm(fullModel, T)
max = which(as.character(broadNet1$gross_rating_point) == max(broadNet1$gross_rating_point))
sdPeak = sd(trendsMatrix[max, ])
meanPeak = mean(trendsMatrix[max, ])
df = data.frame(x = 1:20, F = trendsMatrix[max, ], L = meanPeak - 0.1, U = meanPeak + 0.1)
plot(df$x, df$F, ylim = c(0, 0.4), type = "l", main = "", xlab = "Minute", ylab = "Difference")
lines(df$x, df$F, lwd = 2)
#add red lines to plot
lines(df$x, df$U, col="red",lty=2)
lines(df$x, df$L, col="red",lty=2)
