rm(dummiesDirectModelPreBel); rm(variablesDirectModelBel)
# automate with non singular names (wordt dit nog gebruikt?)
removeNonSingular <- function(model, data) {
naCoef = names(which(is.na(coef(model))))
naCoef = gsub('`', '', naCoef)
data = data[, !(names(data) %in% naCoef )]
data
}
# count visits pre-commercial
broad['preVisitorsWeb'] = 0
broad['postVisitorsWeb'] = 0
broad['preVisitorsApp'] = 0
broad['postVisitorsApp'] = 0
intervalSize
start = Sys.time()
for (i in 1:nBroad) { # nBroad
broadDate = broad$date[[i]]
broadTime = broad$time_min[[i]]
broadCountry = broad$country[[i]]
if(broadCountry == "Belgium") {
if(broadTime - intervalSize < 0) {
#extraVis of day before
preVisitorsAppExtra = sum(subset(visitorsSum, date == as.Date(broadDate) - 1 & time_min >= 60*24 + broadTime - intervalSize)$visitsAppBel)
preVisitorsWebExtra = sum(subset(visitorsSum, date == as.Date(broadDate) - 1 & time_min >= 60*24 + broadTime - intervalSize)$visitsWebBel)
} else if(broadTime + intervalSize >= 60*24) {
#extraVis on day after
postVisitorsAppExtra = sum(subset(visitorsSum, date == as.Date(broadDate) - 1 & time_min <= intervalSize - 60*24 + broadTime)$visitsAppBel)
postVisitorsWebExtra = sum(subset(visitorsSum, date == as.Date(broadDate) - 1 & time_min <= intervalSize - 60*24 + broadTime)$visitsWebBel)
} else {
preVisitorsAppExtra = 0; preVisitorsWebExtra = 0; postVisitorsAppExtra = 0; postVisitorsWebExtra = 0;
}
broad$preVisitorsApp[[i]] = sum(subset(visitorsSum, date == broadDate & time_min < broadTime & time_min >= broadTime - intervalSize)$visitsAppBel) + preVisitorsAppExtra
broad$preVisitorsWeb[[i]] = sum(subset(visitorsSum, date == broadDate & time_min < broadTime & time_min >= broadTime - intervalSize)$visitsWebBel) + preVisitorsWebExtra
broad$postVisitorsApp[[i]] = sum(subset(visitorsSum, date == broadDate  & time_min >= broadTime & time_min < broadTime + intervalSize)$visitsAppBel) + postVisitorsAppExtra
broad$postVisitorsWeb[[i]] = sum(subset(visitorsSum, date == broadDate & time_min >= broadTime & time_min < broadTime + intervalSize)$visitsWebBel) + postVisitorsWebExtra
} else if(broadCountry == "Netherlands") {
if(broadTime - intervalSize < 0) {
#extraVis of day before
preVisitorsAppExtra = sum(subset(visitorsSum, date == as.Date(broadDate) - 1 & time_min >= 60*24 + broadTime - intervalSize)$visitsAppNet)
preVisitorsWebExtra = sum(subset(visitorsSum, date == as.Date(broadDate) - 1 & time_min >= 60*24 + broadTime - intervalSize)$visitsWebNet)
} else if(broadTime + intervalSize >= 60*24) {
#extraVis on day after
postVisitorsAppExtra = sum(subset(visitorsSum, date == as.Date(broadDate) - 1 & time_min <= intervalSize - 60*24 + broadTime)$visitsAppNet)
postVisitorsWebExtra = sum(subset(visitorsSum, date == as.Date(broadDate) - 1 & time_min <= intervalSize - 60*24 + broadTime)$visitsWebNet)
} else {
preVisitorsAppExtra = 0; preVisitorsWebExtra = 0; postVisitorsAppExtra = 0; postVisitorsWebExtra = 0;
}
broad$preVisitorsApp[[i]] = sum(subset(visitorsSum, date == broadDate & time_min < broadTime & time_min >= broadTime - intervalSize)$visitsAppNet) + preVisitorsAppExtra
broad$preVisitorsWeb[[i]] = sum(subset(visitorsSum, date == broadDate & time_min < broadTime & time_min >= broadTime - intervalSize)$visitsWebNet) + preVisitorsWebExtra
broad$postVisitorsApp[[i]] = sum(subset(visitorsSum, date == broadDate & time_min >= broadTime & time_min < broadTime + intervalSize)$visitsAppNet) + postVisitorsAppExtra
broad$postVisitorsWeb[[i]] = sum(subset(visitorsSum, date == broadDate & time_min >= broadTime & time_min < broadTime + intervalSize)$visitsWebNet) + postVisitorsWebExtra
}
if(i %% 100 == 0) {print(paste(i,Sys.time() - start))}
}
1
# broad for Netherlands and Belgium
broadNet = subset(broad, country == 'Netherlands')
broadBel = subset(broad, country == 'Belgium')
broadNetNoMidnight = subset(broadNet, broadNet$time_min < 1435)
broadNetNoMidnight = subset(broadNetNoMidnight, broadNetNoMidnight$time_min > 5)
broadNet = broadNetNoMidnight
broadBelNoMidnight = subset(broadBel, broadBel$time_min < 1435)
broadBelNoMidnight = subset(broadBelNoMidnight, broadBelNoMidnight$time_min > 5)
## ========================================================
##                    First analysis
## ========================================================
# website analysis
mean(broad$postVisitorsWeb - broad$preVisitorsWeb)
min(broad$postVisitorsWeb - broad$preVisitorsWeb)
max(broad$postVisitorsWeb - broad$preVisitorsWeb)
sum(broad$postVisitorsWeb > broad$preVisitorsWeb)
sum(broad$postVisitorsWeb < broad$preVisitorsWeb)
# data plotting website
plot(broad$preVisitorsWeb, broad$postVisitorsWeb)
lines(cbind(0,10000), cbind(0,10000))
par(mfrow=c(2,1))
hist(broad$postVisitorsWeb, xlim = c(0,3))
hist(broad$preVisitorsWeb, xlim = c(0,3))
par(mfrow=c(1,1))
simpleModelWeb = lm(broad$postVisitorsWeb ~ broad$preVisitorsWeb + 0)
summary(simpleModelWeb)
# Website NL
mean(broadNet$postVisitorsWeb - broadNet$preVisitorsWeb)
min(broadNet$postVisitorsWeb - broadNet$preVisitorsWeb)
max(broadNet$postVisitorsWeb - broadNet$preVisitorsWeb)
sum(broadNet$postVisitorsWeb > broadNet$preVisitorsWeb)
sum(broadNet$postVisitorsWeb < broadNet$preVisitorsWeb)
# data plotting website
plot(broadNet$preVisitorsWeb, broadNet$postVisitorsWeb)
lines(cbind(0,10000), cbind(0,10000))
par(mfrow=c(2,1))
hist(broadNet$postVisitorsWeb, xlim = c(0,3))
hist(broadNet$preVisitorsWeb, xlim = c(0,3))
par(mfrow=c(1,1))
simpleModelWebNet = lm(broadNet$postVisitorsWeb ~ broadNet$preVisitorsWeb + 0)
summary(simpleModelWebNet)
# Website BE
mean(broadBel$postVisitorsWeb - broadBel$preVisitorsWeb)
min(broadBel$postVisitorsWeb - broadBel$preVisitorsWeb)
max(broadBel$postVisitorsWeb - broadBel$preVisitorsWeb)
sum(broadBel$postVisitorsWeb > broadBel$preVisitorsWeb)
sum(broadBel$postVisitorsWeb < broadBel$preVisitorsWeb)
# data plotting website
plot(broadBel$preVisitorsWeb, broadBel$postVisitorsWeb)
lines(cbind(0,10000), cbind(0,10000))
par(mfrow=c(2,1))
hist(broadBel$postVisitorsWeb, xlim = c(0,3))
hist(broadBel$preVisitorsWeb, xlim = c(0,3))
par(mfrow=c(1,1))
simpleModelWebBel = lm(broadBel$postVisitorsWeb ~ broadBel$preVisitorsWeb + 0)
summary(simpleModelWebBel)
# App analysis
mean(broad$postVisitorsApp - broad$preVisitorsApp)
min(broad$postVisitorsApp - broad$preVisitorsApp)
max(broad$postVisitorsApp - broad$preVisitorsApp)
sum(broad$postVisitorsApp > broad$preVisitorsApp)
sum(broad$postVisitorsApp < broad$preVisitorsApp)
# data plotting (app)
plot(broad$preVisitorsApp, broad$postVisitorsApp, xlim = c(0,0.2)) # deze plot....
lines(cbind(0,10000), cbind(0,10000))
par(mfrow=c(2,1))
hist(broad$postVisitorsApp)
hist(broad$preVisitorsApp)
par(mfrow=c(1,1))
simpleModelApp = lm(broad$postVisitorsApp ~ broad$preVisitorsApp + 0)
summary(simpleModelApp)
biggestAds = subset(broad, postVisitorsWeb-preVisitorsWeb > 0.6)
## ========================================================
##            REGRESSION MODELS 5-minute model
## ========================================================
# function for model summary
getModelSumm <- function(model, coef) {
if(coef) {
#print(model)
print(coeftest(model, vcov = vcovHC(model, type="HC1"))) # robust se
}
print(paste("R^2: ", summary(model)$r.squared))
hist(model$residuals, breaks = 50)
print(paste("AIC: ",AIC(model)))
print(paste("BIC: ", BIC(model)))
}
# Cross-products
grpOverlap = matrix(0, nrow(broadNet))
for (i in 1:nrow(broadNet)){
if (dummiesDirectModel$overlapBefore_1[i] == 1){
grpOverlap[i] = broadNet$gross_rating_point[i - 1] + broadNet$gross_rating_point[i]
}
else if (dummiesDirectModel$overlapAfter_1[i] == 1){
grpOverlap[i] = broadNet$gross_rating_point[i] + broadNet$gross_rating_point[i + 1]
}
else{
grpOverlap[i] = broadNet$gross_rating_point[i]
}
}
GRP30 = broadNet$gross_rating_point * dummiesDirectModel$length_of_spot_30
GRP3010 = broadNet$gross_rating_point * dummiesDirectModel$`length_of_spot_30 + 10`
GRPbegin = broadNet$gross_rating_point * dummiesDirectModel$position_in_break_3option_begin
GRPend = broadNet$gross_rating_point * dummiesDirectModel$position_in_break_3option_end
# Baseline models
baselineModel = lm(postVisitorsWeb ~ preVisitorsWeb + factor(hours) + weekdays, data = broadNet)
getModelSumm(baselineModel, T)
# Full model
fullModel = lm(broadNet$postVisitorsWeb ~ broadNet$preVisitorsWeb + factor(broadNet$hours) + broadNet$gross_rating_point + ., data = dummiesDirectModel)
getModelSumm(fullModel, T)
# TRY OUT
datas = dummiesDirectModel
for (i in 1:ncol(datas)){
datas[, i] = broadNet$gross_rating_point * dummiesDirectModel[, i]
}
fullModel2 = lm(broadNet$postVisitorsWeb ~ broadNet$preVisitorsWeb + factor(broadNet$hours) + ., data = datas)
getModelSumm(fullModel2, T)
# Baseline models -- BE WEB
baselineModel = lm(postVisitorsWeb ~ preVisitorsWeb + factor(hours) + weekdays, data = broadBel)
getModelSumm(baselineModel, T)
# Full model -- BE WEB
fullModel = lm(broadBel$postVisitorsWeb ~ broadBel$preVisitorsWeb + factor(broadBel$hours) + broadBel$gross_rating_point +., data = dummiesDirectModelBel)
getModelSumm(fullModel, T)
## ========================================================
##                    Overfitting Test
## ========================================================
#Calculate Mean Squared Prediction Error
preVisitorsWeb = broadNet$preVisitorsWeb
postVisitorsWeb = broadNet$postVisitorsWeb
hours = broadNet$hours
weekdays = broadNet$weekdays
grossRating = broadNet$gross_rating_point
broadDumm = cbind(postVisitorsWeb, preVisitorsWeb, hours, weekdays, grossRating, dummiesDirectModel)
#Calculate Mean Squared Prediction Error
preVisitorsWeb = broadBel$preVisitorsApp
postVisitorsWeb = broadBel$postVisitorsApp
hours = broadBel$hours
weekdays = broadBel$weekdays
grossRating = broadBel$gross_rating_point
broadDumm = cbind(postVisitorsWeb, preVisitorsWeb, hours, weekdays, grossRating, dummiesDirectModel)
set.seed(21)
folds = 100
avBaseTrainError = vector(length = folds)
avBaseTestError = vector(length = folds)
avFullTrainError = vector(length = folds)
avFullTestError = vector(length = folds)
for (i in 1:folds){
sampleSplit = sample.split(broadBel$postVisitorsApp, SplitRatio = 0.8)
broadTrain = broadDumm[sampleSplit == TRUE,]
broadTest = broadDumm[sampleSplit == FALSE,]
# Baseline model
baselineModel = lm(postVisitorsWeb ~ preVisitorsWeb + hours + weekdays_dinsdag + weekdays_donderdag + weekdays_maandag +weekdays_vrijdag + weekdays_woensdag + weekdays_zondag, data = broadTrain)
# getModelSumm(baselineModel, TRUE)
avBaseTrainError[i] = rmse(broadTrain$postVisitorsWeb, predict(baselineModel, broadTrain))
avBaseTestError[i] = rmse(broadTest$postVisitorsWeb, predict(baselineModel, broadTest))
# Treatment effects only models
# treatmentOnlyModel = lm(postVisitors ~ .-preVisitors, data = broadTrain)
# rmse(broadTest$postVisitors, predict(treatmentOnlyModel, broadTest))
# Full treatment model
fullModel = lm(postVisitorsWeb ~ preVisitorsWeb + ., data = broadTrain)
# getModelSumm(fullModel, FALSE)
avFullTrainError[i] = rmse(broadTrain$postVisitorsWeb, predict(fullModel, broadTrain))
avFullTestError[i] = rmse(broadTest$postVisitorsWeb, predict(fullModel, broadTest))
}
mean(avBaseTrainError)
mean(avBaseTestError)
mean(avFullTrainError)
mean(avFullTestError)
## ================================================
##                Netherlands App regression
## ================================================
# Baseline models
baselineModel = lm(postVisitorsApp ~ preVisitorsApp + factor(hours) + weekdays, data = broadNet)
getModelSumm(baselineModel, TRUE)
# Full model
fullModel = lm(broadNet$postVisitorsApp ~ broadNet$preVisitorsApp + factor(broadNet$hours) + broadNet$gross_rating_point + ., data = dummiesDirectModel)
#save(fullModel, file = "my-fitted-boost.rda")
getModelSumm(fullModel, T)
# Baseline models -- BE APP
baselineModel = lm(postVisitorsApp ~ preVisitorsApp + factor(hours) + weekdays, data = broadBel)
getModelSumm(baselineModel, TRUE)
# Full model -- BE APP
fullModel = lm(broadBel$postVisitorsApp ~ broadBel$preVisitorsApp + factor(broadBel$hours) + broadBel$gross_rating_point + ., data = dummiesDirectModelBel)
getModelSumm(fullModel, T)
## ========================================================
##                    Overfitting Test App
## ========================================================
preVisitorsApp = broadNet$preVisitorsApp
postVisitorsApp = broadNet$postVisitorsApp
hours = broadNet$hours
grossRating = broadNet$gross_rating_point
broadDumm = cbind(postVisitorsApp, preVisitorsApp, hours, grossRating, dummiesDirectModel)
set.seed(21)
folds = 100
avBaseTrainError = vector(length = folds)
avBaseTestError = vector(length = folds)
avFullTrainError = vector(length = folds)
avFullTestError = vector(length = folds)
for (i in 1:folds){
sampleSplit = sample.split(broadNet$postVisitorsWeb, SplitRatio = 0.8)
broadTrain = broadDumm[sampleSplit == TRUE,]
broadTest = broadDumm[sampleSplit == FALSE,]
# Baseline model
baselineModel = lm(postVisitorsApp ~ preVisitorsApp + hours + weekdays_dinsdag + weekdays_donderdag + weekdays_maandag +weekdays_vrijdag + weekdays_woensdag + weekdays_zondag, data = broadTrain)
#getModelSumm(baselineModel, TRUE)
avBaseTrainError[i] = rmse(broadTrain$postVisitorsApp, predict(baselineModel, broadTrain))
avBaseTestError[i] = rmse(broadTest$postVisitorsApp, predict(baselineModel, broadTest))
# Treatment effects only models
#treatmentOnlyModel = lm(postVisitors ~ .-preVisitors, data = broadTrain)
#rmse(broadTest$postVisitors, predict(treatmentOnlyModel, broadTest))
# Full treatment model
fullModel = lm(postVisitorsApp ~ preVisitorsApp + ., data = broadTrain)
#getModelSumm(fullModel, FALSE)
avFullTrainError[i] = rmse(broadTrain$postVisitorsApp, predict(fullModel, broadTrain))
avFullTestError[i] = rmse(broadTest$postVisitorsApp, predict(fullModel, broadTest))
}
mean(avBaseTrainError)
mean(avBaseTestError)
mean(avFullTrainError)
mean(avFullTestError)
# Full model
fullModel = lm(broadNet$postVisitorsWeb ~ broadNet$preVisitorsWeb + factor(broadNet$hours) + broadNet$gross_rating_point + ., data = dummiesDirectModel)
getModelSumm(fullModel, T)
save(fullModel, file = "fullModelSaved.rda")
getwd()
load(fullModelSaved.rda)
getwd()
load("fullModelSaved.rda")
fullModel = load(fullModelSaved.rda)
fullModel = load("fullModelSaved.rda")
runApp('RShinyErik.R')
fullModel = load("fullModelSaved.rda")
fullModel
load("fullModelSaved.rda")
fullModel
runApp('RShinyErik.R')
runApp('RShinyErik.R')
class(fullModel$coefficients)
fullCoef = as.data.frame(fullModel$coefficients)
channels = unique(broadNet$channel)
runApp('RShinyErik.R')
dim(fullModel$coefficients)
length(fullModel$coefficients)
runApp('RShinyErik.R')
runApp('RShinyErik.R')
runApp('RShinyErik.R')
runApp('RShinyErik.R')
runApp('RShinyErik.R')
runApp('RShinyErik.R')
runApp('RShinyErik.R')
runApp('RShinyErik.R')
runApp('RShinyErik.R')
runApp('RShinyErik.R')
runApp('RShinyErik.R')
runApp('RShinyErik.R')
runApp('RShinyErik.R')
runApp('RShinyErik.R')
runApp('RShinyErik.R')
names(fullModel$coefficients)
runApp('RShinyErik.R')
runApp('RShinyErik.R')
runApp('RShinyErik.R')
runApp('RShinyErik.R')
runApp('RShinyErik.R')
library(shiny); runApp('RShinyErik.R')
runApp('RShinyErik.R')
runApp('RShinyErik.R')
getModelSumm(fullModel, T)
# Full model
fullModel = lm(broadNet$postVisitorsWeb ~ broadNet$preVisitorsWeb + factor(broadNet$hours) + broadNet$gross_rating_point + ., data = dummiesDirectModel)
getModelSumm(fullModel, T)
library("chron")
library("ggplot2")
library("lubridate")
library("data.table")
library("caTools")
library("fastDummies")
library("zoo")
library("CausalImpact")
library("factoextra")
library("fastDummies")
library("lmtest") # use the variance estimator in a linear model
library("sandwich") # computes robust covariance matrix estimators
library("stats") # AIC, BIC
library("Metrics") # rmse calc
library("plyr")
library("gtrendsR")
library("tseries")
library("seastests")
library("pastecs")
library("plotrix")
getModelSumm(fullModel, T)
names(broadNet)
names(dummiesDirectModel)
runApp('RShinyErik.R')
# Full model
fullModel = lm(broadNet$postVisitorsWeb ~ broadNet$preVisitorsWeb + factor(broadNet$hours) + broadNet$gross_rating_point + ., data = dummiesDirectModel)
runApp('RShinyErik.R')
fullModel
dim(fullModel$coefficients)
length(fullModel$coefficients)
?zeros
?dataframe
?as.data.frame
?matrix
testdf = as.data.frame(matrix(data = 0, nrow = 1, ncol = 64))
testdf
names(testdf) = names(fullModel$coefficients)
predict(fullModel, testdf)
names(testdf)
names(testdf) = gsub("`", "", names(fullModel$coefficients))
names(testdf)
predict(fullModel, testdf)
testdf
predict(fullModel, testdf)
# Full model
imput = cbind(broadNet$postVisitorsWeb, broadNet$preVisitorsWeb, factor(broadNet$hours), broadNet$gross_rating_point, dummiesDirectModel)
# Full model
input = cbind(broadNet$postVisitorsWeb, broadNet$preVisitorsWeb, factor(broadNet$hours), broadNet$gross_rating_point, dummiesDirectModel)
names(input)
fullModel
fullModel = lm(broadNet$postVisitorsWeb ~ ., data = input)
fullModel
summary(input)
# Full model
input = cbind(broadNet$postVisitorsWeb, broadNet$preVisitorsWeb, factor(broadNet$hours), broadNet$gross_rating_point, dummiesDirectModel)
fullModel = lm(broadNet$postVisitorsWeb ~ ., data = input)
testdf = as.data.frame(matrix(data = 0, nrow = 1, ncol = 64))
names(testdf) = gsub("`", "", names(input))
predict(fullModel, testdf)
names(testdf) = names(input)
predict(fullModel, testdf)
input = cbind(broadNet$postVisitorsWeb, broadNet$preVisitorsWeb, factor(broadNet$hours), broadNet$gross_rating_point, dummiesDirectModel)
fullModel = lm(broadNet$postVisitorsWeb ~ ., data = input)
testdf = as.data.frame(matrix(data = 0, nrow = 1, ncol = 64))
names(testdf) = names(input)
predict(fullModel, testdf)
predict(fullModel, input)
predict(fullModel)
input
summary(input)
predict(fullModel)
?predict
predict(fullModel, input[1,:])
predict(fullModel, input[1,])
input[1,] = as.data.frame(matrix(data = 0, nrow = 1, ncol = 64))
input[1,]
dim(input)
# Full model
input = cbind(broadNet$postVisitorsWeb, broadNet$preVisitorsWeb, factor(broadNet$hours), broadNet$gross_rating_point, dummiesDirectModel)
dim(input)
names(input)
input[1,] = as.data.frame(matrix(data = 0, nrow = 1, ncol = 46))
predict(fullModel, input[1,])
input[1,] = as.data.frame(matrix(data = 1, nrow = 1, ncol = 46))
predict(fullModel, input[1,])
input[1,] = as.data.frame(matrix(data = 2, nrow = 1, ncol = 46))
predict(fullModel, input[1,])
input[1,] = as.data.frame(matrix(data = 0, nrow = 1, ncol = 46))
predict(fullModel, input[1,])
# Full model
input = cbind(broadNet$postVisitorsWeb, broadNet$preVisitorsWeb, factor(broadNet$hours), broadNet$gross_rating_point, dummiesDirectModel)
input[1,]
fullModel = lm(broadNet$postVisitorsWeb ~ broadNet$preVisitorsWeb + factor(broadNet$hours) + broadNet$gross_rating_point + ., data = dummiesDirectModel)
fullModel = lm(broadNet$postVisitorsWeb ~ ., data = input)
fullModel = lm(broadNet$postVisitorsWeb ~ broadNet$preVisitorsWeb + factor(broadNet$hours) + broadNet$gross_rating_point + ., data = dummiesDirectModel)
fullModel
fullModel = lm(broadNet$postVisitorsWeb ~ ., data = input)
fullModel
fullModel = lm(broadNet$postVisitorsWeb ~ ., data = input)
length(fullModel$coefficients)
fullModel = lm(broadNet$postVisitorsWeb ~ broadNet$preVisitorsWeb + factor(broadNet$hours) + broadNet$gross_rating_point + ., data = dummiesDirectModel)
length(fullModel$coefficients)
fullModel = lm(broadNet$postVisitorsWeb ~ ., data = input)
fullModel
fullModel = lm('broadNet$postVisitorsWeb' ~ ., data = input)
names(input)
fullModel = lm("broadNet$postVisitorsWeb" ~ ., data = input)
fullModel = lm(broadNet$postVisitorsWeb ~ . - broadNet$postVisitorsWeb , data = input)
length(fullModel$coefficients)
length(names(input))
names(input)
# Full model
fullModel = lm(broadNet$postVisitorsWeb ~ broadNet$preVisitorsWeb + factor(broadNet$hours) + broadNet$gross_rating_point + ., data = dummiesDirectModel)
dummiesDirectModel
?lm
fullModel$call
fullModel$terms
fullModel$x
fullModel$fitted.values
fullModel$x
fullModel$y
# Full model
fullModel = lm(broadNet$postVisitorsWeb ~ broadNet$preVisitorsWeb + factor(broadNet$hours) + broadNet$gross_rating_point + ., data = dummiesDirectModel)
testdf = as.data.frame(matrix(data = 0, nrow = 1, ncol = 64))
names(testdf) = names(fullModel$coefficients)
predict(fullModel, testdf)
testdf = as.data.frame(matrix(data = 0, nrow = 1, ncol = 46))
names(testdf) = names(fullModel$coefficients)
testdf = as.data.frame(matrix(data = 0, nrow = 1, ncol = 64))
# Full model
input = as.data.frame(cbind(broadNet$postVisitorsWeb, broadNet$preVisitorsWeb, factor(broadNet$hours), broadNet$gross_rating_point, dummiesDirectModel))
View(input)
dim(input)
names(input)
names(input)[1]
names(input)[1:4] = c("postVisitorsWeb", "preVisitorsWeb", "hours)", "gross_rating_point")
names(input)
fullModelTest = lm(postVisitorsWeb ~ . data = input)
fullModelTest = lm(postVisitorsWeb ~ ., data = input)
fullModelTest
fullModelTest = lm(postVisitorsWeb ~ ., data = input)
fullModelTest = lm(postVisitorsWeb ~ ., data = input)
dim(input)
testdf = as.data.frame(matrix(data = 0, nrow = 1, ncol = 46))
names(testdf) = names(input)
predict(fullModelTest, testdf)
names(input)
# Full model
input = as.data.frame(cbind(broadNet$postVisitorsWeb, broadNet$preVisitorsWeb, factor(broadNet$hours), broadNet$gross_rating_point, dummiesDirectModel))
names(input)[1:4] = c("postVisitorsWeb", "preVisitorsWeb", "hours", "gross_rating_point")
fullModel = lm(broadNet$postVisitorsWeb ~ broadNet$preVisitorsWeb + factor(broadNet$hours) + broadNet$gross_rating_point + ., data = dummiesDirectModel)
fullModelTest = lm(postVisitorsWeb ~ ., data = input)
testdf = as.data.frame(matrix(data = 0, nrow = 1, ncol = 46))
names(testdf) = names(input)
predict(fullModelTest, testdf)
testdf
names(input)
testdf["hours"] = factor(testdf["hours"])
predict(fullModelTest, testdf)
fullModel = lm(broadNet$postVisitorsWeb ~ broadNet$preVisitorsWeb + factor(broadNet$hours) + broadNet$gross_rating_point + ., data = dummiesDirectModel)
fullModel
fullModelTest
save(fullModelTest, file = "fullModelSaved.rda")
# Full model
input = as.data.frame(cbind(broadNet$postVisitorsWeb, broadNet$preVisitorsWeb, factor(broadNet$hours), broadNet$gross_rating_point, dummiesDirectModel))
names(input)[1:4] = c("postVisitorsWeb", "preVisitorsWeb", "hours", "gross_rating_point")
fullModel = lm(broadNet$postVisitorsWeb ~ broadNet$preVisitorsWeb + factor(broadNet$hours) + broadNet$gross_rating_point + ., data = dummiesDirectModel)
fullModelTest = lm(postVisitorsWeb ~ ., data = input)
testdf = as.data.frame(matrix(data = 0, nrow = 1, ncol = 46))
names(testdf) = names(fullModelTest$coefficients)
testdf["hours"] = factor(testdf["hours"])
predict(fullModelTest, testdf)
input = as.data.frame(cbind(broadNet$postVisitorsWeb, broadNet$preVisitorsWeb, factor(broadNet$hours), broadNet$gross_rating_point, dummiesDirectModel))
names(input)[1:4] = c("postVisitorsWeb", "preVisitorsWeb", "hours", "gross_rating_point")
fullModel = lm(broadNet$postVisitorsWeb ~ broadNet$preVisitorsWeb + factor(broadNet$hours) + broadNet$gross_rating_point + ., data = dummiesDirectModel)
fullModelTest = lm(postVisitorsWeb ~ ., data = input)
testdf = as.data.frame(matrix(data = 0, nrow = 1, ncol = 46))
names(testdf) = names(input)
testdf["hours"] = factor(testdf["hours"])
predict(fullModelTest, testdf)
getModelSumm(fullModel, T)
save(testdf, file = "testdf")
runApp('RShinyErik.R')
install.packages("shinyWidgets")
runApp('RShinyMarjo.R')
runApp('RShinyMarjo.R')
runApp('RShinyMarjo.R')
